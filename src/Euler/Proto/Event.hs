{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Euler.Proto.Event where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Euler.Proto.Event.Card
import qualified Euler.Proto.Event.Chargeback
import qualified Euler.Proto.Event.Order
import qualified Euler.Proto.Event.Customer
import qualified Euler.Proto.Event.Feature
import qualified Euler.Proto.Event.TxnDetail
import qualified Euler.Proto.Event.TxnCardInfo
import qualified Euler.Proto.Event.Refund
import qualified Euler.Proto.Event.ResellerAccount
import qualified Euler.Proto.Event.RiskManagementAccount
 
data Event = Event{eventEvent :: Hs.Maybe EventEvent}
           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Event where
        nameOf _ = (Hs.fromString "Event")
 
instance HsProtobuf.HasDefault Event
 
instance HsProtobuf.Message Event where
        encodeMessage _ Event{eventEvent = eventEvent}
          = (Hs.mconcat
               [case eventEvent of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             EventEventOrder y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Euler.Proto.Event.Order.Order)
                                        @(HsProtobuf.Nested Euler.Proto.Event.Order.Order)
                                        (Hs.Just y)))
                             EventEventTxnDetail y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Euler.Proto.Event.TxnDetail.TxnDetail)
                                        @(HsProtobuf.Nested Euler.Proto.Event.TxnDetail.TxnDetail)
                                        (Hs.Just y)))
                             EventEventRefund y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Euler.Proto.Event.Refund.Refund)
                                        @(HsProtobuf.Nested Euler.Proto.Event.Refund.Refund)
                                        (Hs.Just y)))
                             EventEventTxnCardInfo y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce
                                        @(Hs.Maybe Euler.Proto.Event.TxnCardInfo.TxnCardInfo)
                                        @(HsProtobuf.Nested Euler.Proto.Event.TxnCardInfo.TxnCardInfo)
                                        (Hs.Just y)))
                             EventEventCard y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (Hs.coerce @(Hs.Maybe Euler.Proto.Event.Card.Card)
                                        @(HsProtobuf.Nested Euler.Proto.Event.Card.Card)
                                        (Hs.Just y)))
                             EventEventResellerAccount y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                                     (Hs.coerce
                                        @(Hs.Maybe Euler.Proto.Event.ResellerAccount.ResellerAccount)
                                        @(HsProtobuf.Nested Euler.Proto.Event.ResellerAccount.ResellerAccount)
                                        (Hs.Just y)))
                             EventEventRiskManagementAccount y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                                     (Hs.coerce
                                        @(Hs.Maybe Euler.Proto.Event.RiskManagementAccount.RiskManagementAccount)
                                        @(HsProtobuf.Nested Euler.Proto.Event.RiskManagementAccount.RiskManagementAccount)
                                        (Hs.Just y)))
                             EventEventChargeback y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                                     (Hs.coerce @(Hs.Maybe Euler.Proto.Event.Chargeback.Chargeback)
                                        @(HsProtobuf.Nested Euler.Proto.Event.Chargeback.Chargeback)
                                        (Hs.Just y)))
                             EventEventCustomer y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 9)
                                     (Hs.coerce @(Hs.Maybe Euler.Proto.Event.Customer.Customer)
                                        @(HsProtobuf.Nested Euler.Proto.Event.Customer.Customer)
                                        (Hs.Just y)))
                             EventEventFeature y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 10)
                                     (Hs.coerce @(Hs.Maybe Euler.Proto.Event.Feature.Feature)
                                        @(HsProtobuf.Nested Euler.Proto.Event.Feature.Feature)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Event) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap EventEventOrder)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Euler.Proto.Event.Order.Order))
                        @(_ (Hs.Maybe Euler.Proto.Event.Order.Order))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap EventEventTxnDetail)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Euler.Proto.Event.TxnDetail.TxnDetail))
                        @(_ (Hs.Maybe Euler.Proto.Event.TxnDetail.TxnDetail))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap EventEventRefund)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Euler.Proto.Event.Refund.Refund))
                        @(_ (Hs.Maybe Euler.Proto.Event.Refund.Refund))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap EventEventTxnCardInfo)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Euler.Proto.Event.TxnCardInfo.TxnCardInfo))
                        @(_ (Hs.Maybe Euler.Proto.Event.TxnCardInfo.TxnCardInfo))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure (Hs.fmap EventEventCard)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Euler.Proto.Event.Card.Card))
                        @(_ (Hs.Maybe Euler.Proto.Event.Card.Card))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 6),
                   (Hs.pure (Hs.fmap EventEventResellerAccount)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Euler.Proto.Event.ResellerAccount.ResellerAccount))
                        @(_ (Hs.Maybe Euler.Proto.Event.ResellerAccount.ResellerAccount))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 7),
                   (Hs.pure (Hs.fmap EventEventRiskManagementAccount)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Euler.Proto.Event.RiskManagementAccount.RiskManagementAccount))
                        @(_ (Hs.Maybe Euler.Proto.Event.RiskManagementAccount.RiskManagementAccount))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 8),
                   (Hs.pure (Hs.fmap EventEventChargeback)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Euler.Proto.Event.Chargeback.Chargeback))
                        @(_ (Hs.Maybe Euler.Proto.Event.Chargeback.Chargeback))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 9),
                   (Hs.pure (Hs.fmap EventEventCustomer)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Euler.Proto.Event.Customer.Customer))
                        @(_ (Hs.Maybe Euler.Proto.Event.Customer.Customer))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 10),
                   (Hs.pure (Hs.fmap EventEventFeature)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Euler.Proto.Event.Feature.Feature))
                        @(_ (Hs.Maybe Euler.Proto.Event.Feature.Feature))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Event where
        toJSONPB
          (Event f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10)
          = (HsJSONPB.object
               [(let encodeEvent
                       = (case f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10
                            of
                              Hs.Just (EventEventOrder f1) -> (HsJSONPB.pair "order" f1)
                              Hs.Just (EventEventTxnDetail f2) -> (HsJSONPB.pair "txn_detail" f2)
                              Hs.Just (EventEventRefund f3) -> (HsJSONPB.pair "refund" f3)
                              Hs.Just (EventEventTxnCardInfo f4)
                                -> (HsJSONPB.pair "txn_card_info" f4)
                              Hs.Just (EventEventCard f5) -> (HsJSONPB.pair "card" f5)
                              Hs.Just (EventEventResellerAccount f6)
                                -> (HsJSONPB.pair "reseller_account" f6)
                              Hs.Just (EventEventRiskManagementAccount f7)
                                -> (HsJSONPB.pair "risk_management_account" f7)
                              Hs.Just (EventEventChargeback f8)
                                -> (HsJSONPB.pair "chargeback" f8)
                              Hs.Just (EventEventCustomer f9) -> (HsJSONPB.pair "customer" f9)
                              Hs.Just (EventEventFeature f10) -> (HsJSONPB.pair "feature" f10)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("event" .= (HsJSONPB.objectOrNull [encodeEvent] options)) options
                       else encodeEvent options)])
        toEncodingPB
          (Event f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10)
          = (HsJSONPB.pairs
               [(let encodeEvent
                       = (case f1_or_f2_or_f3_or_f4_or_f5_or_f6_or_f7_or_f8_or_f9_or_f10
                            of
                              Hs.Just (EventEventOrder f1) -> (HsJSONPB.pair "order" f1)
                              Hs.Just (EventEventTxnDetail f2) -> (HsJSONPB.pair "txn_detail" f2)
                              Hs.Just (EventEventRefund f3) -> (HsJSONPB.pair "refund" f3)
                              Hs.Just (EventEventTxnCardInfo f4)
                                -> (HsJSONPB.pair "txn_card_info" f4)
                              Hs.Just (EventEventCard f5) -> (HsJSONPB.pair "card" f5)
                              Hs.Just (EventEventResellerAccount f6)
                                -> (HsJSONPB.pair "reseller_account" f6)
                              Hs.Just (EventEventRiskManagementAccount f7)
                                -> (HsJSONPB.pair "risk_management_account" f7)
                              Hs.Just (EventEventChargeback f8)
                                -> (HsJSONPB.pair "chargeback" f8)
                              Hs.Just (EventEventCustomer f9) -> (HsJSONPB.pair "customer" f9)
                              Hs.Just (EventEventFeature f10) -> (HsJSONPB.pair "feature" f10)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("event" .= (HsJSONPB.pairsOrNull [encodeEvent] options)) options
                       else encodeEvent options)])
 
instance HsJSONPB.FromJSONPB Event where
        parseJSONPB
          = (HsJSONPB.withObject "Event"
               (\ obj ->
                  (Hs.pure Event) <*>
                    (let parseEvent parseObj
                           = Hs.msum
                               [Hs.Just Hs.. EventEventOrder <$>
                                  (HsJSONPB.parseField parseObj "order"),
                                Hs.Just Hs.. EventEventTxnDetail <$>
                                  (HsJSONPB.parseField parseObj "txn_detail"),
                                Hs.Just Hs.. EventEventRefund <$>
                                  (HsJSONPB.parseField parseObj "refund"),
                                Hs.Just Hs.. EventEventTxnCardInfo <$>
                                  (HsJSONPB.parseField parseObj "txn_card_info"),
                                Hs.Just Hs.. EventEventCard <$>
                                  (HsJSONPB.parseField parseObj "card"),
                                Hs.Just Hs.. EventEventResellerAccount <$>
                                  (HsJSONPB.parseField parseObj "reseller_account"),
                                Hs.Just Hs.. EventEventRiskManagementAccount <$>
                                  (HsJSONPB.parseField parseObj "risk_management_account"),
                                Hs.Just Hs.. EventEventChargeback <$>
                                  (HsJSONPB.parseField parseObj "chargeback"),
                                Hs.Just Hs.. EventEventCustomer <$>
                                  (HsJSONPB.parseField parseObj "customer"),
                                Hs.Just Hs.. EventEventFeature <$>
                                  (HsJSONPB.parseField parseObj "feature"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "event") Hs.>>= (HsJSONPB.withObject "event" parseEvent))
                         <|> (parseEvent obj))))
 
instance HsJSONPB.ToJSON Event where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Event where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Event where
        declareNamedSchema _
          = do let declare_event = HsJSONPB.declareSchemaRef
               eventEvent <- declare_event Proxy.Proxy
               let _ = Hs.pure Event <*> HsJSONPB.asProxy declare_event
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Event",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("event", eventEvent)]}})
 
data EventEvent = EventEventOrder Euler.Proto.Event.Order.Order
                | EventEventTxnDetail Euler.Proto.Event.TxnDetail.TxnDetail
                | EventEventRefund Euler.Proto.Event.Refund.Refund
                | EventEventTxnCardInfo Euler.Proto.Event.TxnCardInfo.TxnCardInfo
                | EventEventCard Euler.Proto.Event.Card.Card
                | EventEventResellerAccount Euler.Proto.Event.ResellerAccount.ResellerAccount
                | EventEventRiskManagementAccount Euler.Proto.Event.RiskManagementAccount.RiskManagementAccount
                | EventEventChargeback Euler.Proto.Event.Chargeback.Chargeback
                | EventEventCustomer Euler.Proto.Event.Customer.Customer
                | EventEventFeature Euler.Proto.Event.Feature.Feature
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named EventEvent where
        nameOf _ = (Hs.fromString "EventEvent")
 
instance HsJSONPB.ToSchema EventEvent where
        declareNamedSchema _
          = do let declare_order = HsJSONPB.declareSchemaRef
               eventEventOrder <- declare_order Proxy.Proxy
               let _ = Hs.pure EventEventOrder <*> HsJSONPB.asProxy declare_order
               let declare_txn_detail = HsJSONPB.declareSchemaRef
               eventEventTxnDetail <- declare_txn_detail Proxy.Proxy
               let _ = Hs.pure EventEventTxnDetail <*>
                         HsJSONPB.asProxy declare_txn_detail
               let declare_refund = HsJSONPB.declareSchemaRef
               eventEventRefund <- declare_refund Proxy.Proxy
               let _ = Hs.pure EventEventRefund <*>
                         HsJSONPB.asProxy declare_refund
               let declare_txn_card_info = HsJSONPB.declareSchemaRef
               eventEventTxnCardInfo <- declare_txn_card_info Proxy.Proxy
               let _ = Hs.pure EventEventTxnCardInfo <*>
                         HsJSONPB.asProxy declare_txn_card_info
               let declare_card = HsJSONPB.declareSchemaRef
               eventEventCard <- declare_card Proxy.Proxy
               let _ = Hs.pure EventEventCard <*> HsJSONPB.asProxy declare_card
               let declare_reseller_account = HsJSONPB.declareSchemaRef
               eventEventResellerAccount <- declare_reseller_account Proxy.Proxy
               let _ = Hs.pure EventEventResellerAccount <*>
                         HsJSONPB.asProxy declare_reseller_account
               let declare_risk_management_account = HsJSONPB.declareSchemaRef
               eventEventRiskManagementAccount <- declare_risk_management_account
                                                    Proxy.Proxy
               let _ = Hs.pure EventEventRiskManagementAccount <*>
                         HsJSONPB.asProxy declare_risk_management_account
               let declare_chargeback = HsJSONPB.declareSchemaRef
               eventEventChargeback <- declare_chargeback Proxy.Proxy
               let _ = Hs.pure EventEventChargeback <*>
                         HsJSONPB.asProxy declare_chargeback
               let declare_customer = HsJSONPB.declareSchemaRef
               eventEventCustomer <- declare_customer Proxy.Proxy
               let _ = Hs.pure EventEventCustomer <*>
                         HsJSONPB.asProxy declare_customer
               let declare_feature = HsJSONPB.declareSchemaRef
               eventEventFeature <- declare_feature Proxy.Proxy
               let _ = Hs.pure EventEventFeature <*>
                         HsJSONPB.asProxy declare_feature
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "EventEvent",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("order", eventEventOrder),
                                                        ("txn_detail", eventEventTxnDetail),
                                                        ("refund", eventEventRefund),
                                                        ("txn_card_info", eventEventTxnCardInfo),
                                                        ("card", eventEventCard),
                                                        ("reseller_account",
                                                         eventEventResellerAccount),
                                                        ("risk_management_account",
                                                         eventEventRiskManagementAccount),
                                                        ("chargeback", eventEventChargeback),
                                                        ("customer", eventEventCustomer),
                                                        ("feature", eventEventFeature)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})