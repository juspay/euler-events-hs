{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Euler.Proto.Event where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Euler.Proto.Event.Order
import qualified Euler.Proto.Event.Txn
import qualified Euler.Proto.Event.Refund
 
data Event = Event{eventEvent :: Hs.Maybe EventEvent}
           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Event where
        nameOf _ = (Hs.fromString "Event")
 
instance HsProtobuf.HasDefault Event
 
instance HsProtobuf.Message Event where
        encodeMessage _ Event{eventEvent = eventEvent}
          = (Hs.mconcat
               [case eventEvent of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             EventEventOrder y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Euler.Proto.Event.Order.Order)
                                        @(HsProtobuf.Nested Euler.Proto.Event.Order.Order)
                                        (Hs.Just y)))
                             EventEventTxn y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Euler.Proto.Event.Txn.Txn)
                                        @(HsProtobuf.Nested Euler.Proto.Event.Txn.Txn)
                                        (Hs.Just y)))
                             EventEventRefund y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Euler.Proto.Event.Refund.Refund)
                                        @(HsProtobuf.Nested Euler.Proto.Event.Refund.Refund)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure Event) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap EventEventOrder)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Euler.Proto.Event.Order.Order))
                        @(_ (Hs.Maybe Euler.Proto.Event.Order.Order))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap EventEventTxn)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Euler.Proto.Event.Txn.Txn))
                        @(_ (Hs.Maybe Euler.Proto.Event.Txn.Txn))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap EventEventRefund)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Euler.Proto.Event.Refund.Refund))
                        @(_ (Hs.Maybe Euler.Proto.Event.Refund.Refund))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB Event where
        toJSONPB (Event f1_or_f2_or_f3)
          = (HsJSONPB.object
               [(let encodeEvent
                       = (case f1_or_f2_or_f3 of
                              Hs.Just (EventEventOrder f1) -> (HsJSONPB.pair "order" f1)
                              Hs.Just (EventEventTxn f2) -> (HsJSONPB.pair "txn" f2)
                              Hs.Just (EventEventRefund f3) -> (HsJSONPB.pair "refund" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("event" .= (HsJSONPB.objectOrNull [encodeEvent] options)) options
                       else encodeEvent options)])
        toEncodingPB (Event f1_or_f2_or_f3)
          = (HsJSONPB.pairs
               [(let encodeEvent
                       = (case f1_or_f2_or_f3 of
                              Hs.Just (EventEventOrder f1) -> (HsJSONPB.pair "order" f1)
                              Hs.Just (EventEventTxn f2) -> (HsJSONPB.pair "txn" f2)
                              Hs.Just (EventEventRefund f3) -> (HsJSONPB.pair "refund" f3)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("event" .= (HsJSONPB.pairsOrNull [encodeEvent] options)) options
                       else encodeEvent options)])
 
instance HsJSONPB.FromJSONPB Event where
        parseJSONPB
          = (HsJSONPB.withObject "Event"
               (\ obj ->
                  (Hs.pure Event) <*>
                    (let parseEvent parseObj
                           = Hs.msum
                               [Hs.Just Hs.. EventEventOrder <$>
                                  (HsJSONPB.parseField parseObj "order"),
                                Hs.Just Hs.. EventEventTxn <$>
                                  (HsJSONPB.parseField parseObj "txn"),
                                Hs.Just Hs.. EventEventRefund <$>
                                  (HsJSONPB.parseField parseObj "refund"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "event") Hs.>>= (HsJSONPB.withObject "event" parseEvent))
                         <|> (parseEvent obj))))
 
instance HsJSONPB.ToJSON Event where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Event where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Event where
        declareNamedSchema _
          = do let declare_event = HsJSONPB.declareSchemaRef
               eventEvent <- declare_event Proxy.Proxy
               let _ = Hs.pure Event <*> HsJSONPB.asProxy declare_event
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Event",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("event", eventEvent)]}})
 
data EventEvent = EventEventOrder Euler.Proto.Event.Order.Order
                | EventEventTxn Euler.Proto.Event.Txn.Txn
                | EventEventRefund Euler.Proto.Event.Refund.Refund
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named EventEvent where
        nameOf _ = (Hs.fromString "EventEvent")
 
instance HsJSONPB.ToSchema EventEvent where
        declareNamedSchema _
          = do let declare_order = HsJSONPB.declareSchemaRef
               eventEventOrder <- declare_order Proxy.Proxy
               let _ = Hs.pure EventEventOrder <*> HsJSONPB.asProxy declare_order
               let declare_txn = HsJSONPB.declareSchemaRef
               eventEventTxn <- declare_txn Proxy.Proxy
               let _ = Hs.pure EventEventTxn <*> HsJSONPB.asProxy declare_txn
               let declare_refund = HsJSONPB.declareSchemaRef
               eventEventRefund <- declare_refund Proxy.Proxy
               let _ = Hs.pure EventEventRefund <*>
                         HsJSONPB.asProxy declare_refund
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "EventEvent",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("order", eventEventOrder),
                                                        ("txn", eventEventTxn),
                                                        ("refund", eventEventRefund)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})