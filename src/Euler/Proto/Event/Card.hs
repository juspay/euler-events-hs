{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Euler.Proto.Event.Card where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data Card = Card{cardMerchantAccountId :: Hs.Int64,
                 cardCustomerId :: Hs.Text, cardMaskedCardNumber :: Hs.Text,
                 cardExpMonth :: Hs.Int64, cardExpYear :: Hs.Int64,
                 cardCardIsin :: Hs.Text, cardCardLastFourDigits :: Hs.Text,
                 cardCardReference :: Hs.Text, cardCardFingerprint :: Hs.Text,
                 cardVaultProvider ::
                 HsProtobuf.Enumerated Euler.Proto.Event.Card.VaultProvider,
                 cardMaybeNameOnCard :: Hs.Maybe CardMaybeNameOnCard,
                 cardMaybeCardGlobalFingerprint ::
                 Hs.Maybe CardMaybeCardGlobalFingerprint,
                 cardMaybeNickname :: Hs.Maybe CardMaybeNickname,
                 cardMaybeCardType :: Hs.Maybe CardMaybeCardType,
                 cardMaybeCardIssuer :: Hs.Maybe CardMaybeCardIssuer,
                 cardMaybeCardBrand :: Hs.Maybe CardMaybeCardBrand,
                 cardMaybeCardToken :: Hs.Maybe CardMaybeCardToken,
                 cardCardEventType ::
                 HsProtobuf.Enumerated Euler.Proto.Event.Card.CardEventType}
          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Card where
        nameOf _ = (Hs.fromString "Card")
 
instance HsProtobuf.HasDefault Card
 
instance HsProtobuf.Message Card where
        encodeMessage _
          Card{cardMerchantAccountId = cardMerchantAccountId,
               cardCustomerId = cardCustomerId,
               cardMaskedCardNumber = cardMaskedCardNumber,
               cardExpMonth = cardExpMonth, cardExpYear = cardExpYear,
               cardCardIsin = cardCardIsin,
               cardCardLastFourDigits = cardCardLastFourDigits,
               cardCardReference = cardCardReference,
               cardCardFingerprint = cardCardFingerprint,
               cardVaultProvider = cardVaultProvider,
               cardMaybeNameOnCard = cardMaybeNameOnCard,
               cardMaybeCardGlobalFingerprint = cardMaybeCardGlobalFingerprint,
               cardMaybeNickname = cardMaybeNickname,
               cardMaybeCardType = cardMaybeCardType,
               cardMaybeCardIssuer = cardMaybeCardIssuer,
               cardMaybeCardBrand = cardMaybeCardBrand,
               cardMaybeCardToken = cardMaybeCardToken,
               cardCardEventType = cardCardEventType}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   cardMerchantAccountId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   cardCustomerId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   cardMaskedCardNumber),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   cardExpMonth),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   cardExpYear),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   cardCardIsin),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                   cardCardLastFourDigits),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                   cardCardReference),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 9)
                   cardCardFingerprint),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 10)
                   cardVaultProvider),
                case cardMaybeNameOnCard of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             CardMaybeNameOnCardNameOnCard y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 12)
                                     (HsProtobuf.ForceEmit y)),
                case cardMaybeCardGlobalFingerprint of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             CardMaybeCardGlobalFingerprintCardGlobalFingerprint y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 13)
                                     (HsProtobuf.ForceEmit y)),
                case cardMaybeNickname of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             CardMaybeNicknameNickname y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 14)
                                     (HsProtobuf.ForceEmit y)),
                case cardMaybeCardType of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             CardMaybeCardTypeCardType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 15)
                                     (HsProtobuf.ForceEmit y)),
                case cardMaybeCardIssuer of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             CardMaybeCardIssuerCardIssuer y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 16)
                                     (HsProtobuf.ForceEmit y)),
                case cardMaybeCardBrand of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             CardMaybeCardBrandCardBrand y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 17)
                                     (HsProtobuf.ForceEmit y)),
                case cardMaybeCardToken of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             CardMaybeCardTokenCardToken y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 18)
                                     (HsProtobuf.ForceEmit y)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 11)
                   cardCardEventType)])
        decodeMessage _
          = (Hs.pure Card) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 6))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 7))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 8))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 9))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 10))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 12),
                   (Hs.pure (Hs.Just Hs.. CardMaybeNameOnCardNameOnCard)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 13),
                   (Hs.pure
                      (Hs.Just Hs.. CardMaybeCardGlobalFingerprintCardGlobalFingerprint))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 14),
                   (Hs.pure (Hs.Just Hs.. CardMaybeNicknameNickname)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 15),
                   (Hs.pure (Hs.Just Hs.. CardMaybeCardTypeCardType)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 16),
                   (Hs.pure (Hs.Just Hs.. CardMaybeCardIssuerCardIssuer)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 17),
                   (Hs.pure (Hs.Just Hs.. CardMaybeCardBrandCardBrand)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 18),
                   (Hs.pure (Hs.Just Hs.. CardMaybeCardTokenCardToken)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 11))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "merchant_account_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "customer_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "masked_card_number")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "exp_month")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "exp_year")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "card_isin")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 7)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "card_last_four_digits")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 8)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "card_reference")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 9)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "card_fingerprint")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 10)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "VaultProvider")))
                (HsProtobuf.Single "vault_provider")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 11)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "CardEventType")))
                (HsProtobuf.Single "card_event_type")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Card where
        toJSONPB
          (Card f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f12 f13 f14 f15 f16 f17 f18
             f11)
          = (HsJSONPB.object
               ["merchant_account_id" .= f1, "customer_id" .= f2,
                "masked_card_number" .= f3, "exp_month" .= f4, "exp_year" .= f5,
                "card_isin" .= f6, "card_last_four_digits" .= f7,
                "card_reference" .= f8, "card_fingerprint" .= f9,
                "vault_provider" .= f10,
                (let encodeMaybe_name_on_card
                       = (case f12 of
                              Hs.Just (CardMaybeNameOnCardNameOnCard f12)
                                -> (HsJSONPB.pair "name_on_card" f12)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_name_on_card" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_name_on_card] options))
                         options
                       else encodeMaybe_name_on_card options),
                (let encodeMaybe_card_global_fingerprint
                       = (case f13 of
                              Hs.Just (CardMaybeCardGlobalFingerprintCardGlobalFingerprint f13)
                                -> (HsJSONPB.pair "card_global_fingerprint" f13)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_global_fingerprint" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_global_fingerprint]
                             options))
                         options
                       else encodeMaybe_card_global_fingerprint options),
                (let encodeMaybe_nickname
                       = (case f14 of
                              Hs.Just (CardMaybeNicknameNickname f14)
                                -> (HsJSONPB.pair "nickname" f14)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_nickname" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_nickname] options))
                         options
                       else encodeMaybe_nickname options),
                (let encodeMaybe_card_type
                       = (case f15 of
                              Hs.Just (CardMaybeCardTypeCardType f15)
                                -> (HsJSONPB.pair "card_type" f15)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_type" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_type] options))
                         options
                       else encodeMaybe_card_type options),
                (let encodeMaybe_card_issuer
                       = (case f16 of
                              Hs.Just (CardMaybeCardIssuerCardIssuer f16)
                                -> (HsJSONPB.pair "card_issuer" f16)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_issuer" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_issuer] options))
                         options
                       else encodeMaybe_card_issuer options),
                (let encodeMaybe_card_brand
                       = (case f17 of
                              Hs.Just (CardMaybeCardBrandCardBrand f17)
                                -> (HsJSONPB.pair "card_brand" f17)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_brand" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_brand] options))
                         options
                       else encodeMaybe_card_brand options),
                (let encodeMaybe_card_token
                       = (case f18 of
                              Hs.Just (CardMaybeCardTokenCardToken f18)
                                -> (HsJSONPB.pair "card_token" f18)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_token" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_token] options))
                         options
                       else encodeMaybe_card_token options),
                "card_event_type" .= f11])
        toEncodingPB
          (Card f1 f2 f3 f4 f5 f6 f7 f8 f9 f10 f12 f13 f14 f15 f16 f17 f18
             f11)
          = (HsJSONPB.pairs
               ["merchant_account_id" .= f1, "customer_id" .= f2,
                "masked_card_number" .= f3, "exp_month" .= f4, "exp_year" .= f5,
                "card_isin" .= f6, "card_last_four_digits" .= f7,
                "card_reference" .= f8, "card_fingerprint" .= f9,
                "vault_provider" .= f10,
                (let encodeMaybe_name_on_card
                       = (case f12 of
                              Hs.Just (CardMaybeNameOnCardNameOnCard f12)
                                -> (HsJSONPB.pair "name_on_card" f12)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_name_on_card" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_name_on_card] options))
                         options
                       else encodeMaybe_name_on_card options),
                (let encodeMaybe_card_global_fingerprint
                       = (case f13 of
                              Hs.Just (CardMaybeCardGlobalFingerprintCardGlobalFingerprint f13)
                                -> (HsJSONPB.pair "card_global_fingerprint" f13)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_global_fingerprint" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_global_fingerprint]
                             options))
                         options
                       else encodeMaybe_card_global_fingerprint options),
                (let encodeMaybe_nickname
                       = (case f14 of
                              Hs.Just (CardMaybeNicknameNickname f14)
                                -> (HsJSONPB.pair "nickname" f14)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_nickname" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_nickname] options))
                         options
                       else encodeMaybe_nickname options),
                (let encodeMaybe_card_type
                       = (case f15 of
                              Hs.Just (CardMaybeCardTypeCardType f15)
                                -> (HsJSONPB.pair "card_type" f15)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_type" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_type] options))
                         options
                       else encodeMaybe_card_type options),
                (let encodeMaybe_card_issuer
                       = (case f16 of
                              Hs.Just (CardMaybeCardIssuerCardIssuer f16)
                                -> (HsJSONPB.pair "card_issuer" f16)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_issuer" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_issuer] options))
                         options
                       else encodeMaybe_card_issuer options),
                (let encodeMaybe_card_brand
                       = (case f17 of
                              Hs.Just (CardMaybeCardBrandCardBrand f17)
                                -> (HsJSONPB.pair "card_brand" f17)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_brand" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_brand] options))
                         options
                       else encodeMaybe_card_brand options),
                (let encodeMaybe_card_token
                       = (case f18 of
                              Hs.Just (CardMaybeCardTokenCardToken f18)
                                -> (HsJSONPB.pair "card_token" f18)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_token" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_token] options))
                         options
                       else encodeMaybe_card_token options),
                "card_event_type" .= f11])
 
instance HsJSONPB.FromJSONPB Card where
        parseJSONPB
          = (HsJSONPB.withObject "Card"
               (\ obj ->
                  (Hs.pure Card) <*> obj .: "merchant_account_id" <*>
                    obj .: "customer_id"
                    <*> obj .: "masked_card_number"
                    <*> obj .: "exp_month"
                    <*> obj .: "exp_year"
                    <*> obj .: "card_isin"
                    <*> obj .: "card_last_four_digits"
                    <*> obj .: "card_reference"
                    <*> obj .: "card_fingerprint"
                    <*> obj .: "vault_provider"
                    <*>
                    (let parseMaybe_name_on_card parseObj
                           = Hs.msum
                               [Hs.Just Hs.. CardMaybeNameOnCardNameOnCard <$>
                                  (HsJSONPB.parseField parseObj "name_on_card"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_name_on_card") Hs.>>=
                          (HsJSONPB.withObject "maybe_name_on_card" parseMaybe_name_on_card))
                         <|> (parseMaybe_name_on_card obj))
                    <*>
                    (let parseMaybe_card_global_fingerprint parseObj
                           = Hs.msum
                               [Hs.Just Hs.. CardMaybeCardGlobalFingerprintCardGlobalFingerprint
                                  <$> (HsJSONPB.parseField parseObj "card_global_fingerprint"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_global_fingerprint") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_global_fingerprint"
                             parseMaybe_card_global_fingerprint))
                         <|> (parseMaybe_card_global_fingerprint obj))
                    <*>
                    (let parseMaybe_nickname parseObj
                           = Hs.msum
                               [Hs.Just Hs.. CardMaybeNicknameNickname <$>
                                  (HsJSONPB.parseField parseObj "nickname"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_nickname") Hs.>>=
                          (HsJSONPB.withObject "maybe_nickname" parseMaybe_nickname))
                         <|> (parseMaybe_nickname obj))
                    <*>
                    (let parseMaybe_card_type parseObj
                           = Hs.msum
                               [Hs.Just Hs.. CardMaybeCardTypeCardType <$>
                                  (HsJSONPB.parseField parseObj "card_type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_type") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_type" parseMaybe_card_type))
                         <|> (parseMaybe_card_type obj))
                    <*>
                    (let parseMaybe_card_issuer parseObj
                           = Hs.msum
                               [Hs.Just Hs.. CardMaybeCardIssuerCardIssuer <$>
                                  (HsJSONPB.parseField parseObj "card_issuer"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_issuer") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_issuer" parseMaybe_card_issuer))
                         <|> (parseMaybe_card_issuer obj))
                    <*>
                    (let parseMaybe_card_brand parseObj
                           = Hs.msum
                               [Hs.Just Hs.. CardMaybeCardBrandCardBrand <$>
                                  (HsJSONPB.parseField parseObj "card_brand"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_brand") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_brand" parseMaybe_card_brand))
                         <|> (parseMaybe_card_brand obj))
                    <*>
                    (let parseMaybe_card_token parseObj
                           = Hs.msum
                               [Hs.Just Hs.. CardMaybeCardTokenCardToken <$>
                                  (HsJSONPB.parseField parseObj "card_token"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_token") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_token" parseMaybe_card_token))
                         <|> (parseMaybe_card_token obj))
                    <*> obj .: "card_event_type"))
 
instance HsJSONPB.ToJSON Card where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Card where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Card where
        declareNamedSchema _
          = do let declare_merchant_account_id = HsJSONPB.declareSchemaRef
               cardMerchantAccountId <- declare_merchant_account_id Proxy.Proxy
               let declare_customer_id = HsJSONPB.declareSchemaRef
               cardCustomerId <- declare_customer_id Proxy.Proxy
               let declare_masked_card_number = HsJSONPB.declareSchemaRef
               cardMaskedCardNumber <- declare_masked_card_number Proxy.Proxy
               let declare_exp_month = HsJSONPB.declareSchemaRef
               cardExpMonth <- declare_exp_month Proxy.Proxy
               let declare_exp_year = HsJSONPB.declareSchemaRef
               cardExpYear <- declare_exp_year Proxy.Proxy
               let declare_card_isin = HsJSONPB.declareSchemaRef
               cardCardIsin <- declare_card_isin Proxy.Proxy
               let declare_card_last_four_digits = HsJSONPB.declareSchemaRef
               cardCardLastFourDigits <- declare_card_last_four_digits Proxy.Proxy
               let declare_card_reference = HsJSONPB.declareSchemaRef
               cardCardReference <- declare_card_reference Proxy.Proxy
               let declare_card_fingerprint = HsJSONPB.declareSchemaRef
               cardCardFingerprint <- declare_card_fingerprint Proxy.Proxy
               let declare_vault_provider = HsJSONPB.declareSchemaRef
               cardVaultProvider <- declare_vault_provider Proxy.Proxy
               let declare_maybe_name_on_card = HsJSONPB.declareSchemaRef
               cardMaybeNameOnCard <- declare_maybe_name_on_card Proxy.Proxy
               let declare_maybe_card_global_fingerprint
                     = HsJSONPB.declareSchemaRef
               cardMaybeCardGlobalFingerprint <- declare_maybe_card_global_fingerprint
                                                   Proxy.Proxy
               let declare_maybe_nickname = HsJSONPB.declareSchemaRef
               cardMaybeNickname <- declare_maybe_nickname Proxy.Proxy
               let declare_maybe_card_type = HsJSONPB.declareSchemaRef
               cardMaybeCardType <- declare_maybe_card_type Proxy.Proxy
               let declare_maybe_card_issuer = HsJSONPB.declareSchemaRef
               cardMaybeCardIssuer <- declare_maybe_card_issuer Proxy.Proxy
               let declare_maybe_card_brand = HsJSONPB.declareSchemaRef
               cardMaybeCardBrand <- declare_maybe_card_brand Proxy.Proxy
               let declare_maybe_card_token = HsJSONPB.declareSchemaRef
               cardMaybeCardToken <- declare_maybe_card_token Proxy.Proxy
               let declare_card_event_type = HsJSONPB.declareSchemaRef
               cardCardEventType <- declare_card_event_type Proxy.Proxy
               let _ = Hs.pure Card <*>
                         HsJSONPB.asProxy declare_merchant_account_id
                         <*> HsJSONPB.asProxy declare_customer_id
                         <*> HsJSONPB.asProxy declare_masked_card_number
                         <*> HsJSONPB.asProxy declare_exp_month
                         <*> HsJSONPB.asProxy declare_exp_year
                         <*> HsJSONPB.asProxy declare_card_isin
                         <*> HsJSONPB.asProxy declare_card_last_four_digits
                         <*> HsJSONPB.asProxy declare_card_reference
                         <*> HsJSONPB.asProxy declare_card_fingerprint
                         <*> HsJSONPB.asProxy declare_vault_provider
                         <*> HsJSONPB.asProxy declare_maybe_name_on_card
                         <*> HsJSONPB.asProxy declare_maybe_card_global_fingerprint
                         <*> HsJSONPB.asProxy declare_maybe_nickname
                         <*> HsJSONPB.asProxy declare_maybe_card_type
                         <*> HsJSONPB.asProxy declare_maybe_card_issuer
                         <*> HsJSONPB.asProxy declare_maybe_card_brand
                         <*> HsJSONPB.asProxy declare_maybe_card_token
                         <*> HsJSONPB.asProxy declare_card_event_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Card",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("merchant_account_id",
                                                         cardMerchantAccountId),
                                                        ("customer_id", cardCustomerId),
                                                        ("masked_card_number",
                                                         cardMaskedCardNumber),
                                                        ("exp_month", cardExpMonth),
                                                        ("exp_year", cardExpYear),
                                                        ("card_isin", cardCardIsin),
                                                        ("card_last_four_digits",
                                                         cardCardLastFourDigits),
                                                        ("card_reference", cardCardReference),
                                                        ("card_fingerprint", cardCardFingerprint),
                                                        ("vault_provider", cardVaultProvider),
                                                        ("maybe_name_on_card", cardMaybeNameOnCard),
                                                        ("maybe_card_global_fingerprint",
                                                         cardMaybeCardGlobalFingerprint),
                                                        ("maybe_nickname", cardMaybeNickname),
                                                        ("maybe_card_type", cardMaybeCardType),
                                                        ("maybe_card_issuer", cardMaybeCardIssuer),
                                                        ("maybe_card_brand", cardMaybeCardBrand),
                                                        ("maybe_card_token", cardMaybeCardToken),
                                                        ("card_event_type", cardCardEventType)]}})
 
data CardMaybeNameOnCard = CardMaybeNameOnCardNameOnCard Hs.Text
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CardMaybeNameOnCard where
        nameOf _ = (Hs.fromString "CardMaybeNameOnCard")
 
instance HsJSONPB.ToSchema CardMaybeNameOnCard where
        declareNamedSchema _
          = do let declare_name_on_card = HsJSONPB.declareSchemaRef
               cardMaybeNameOnCardNameOnCard <- declare_name_on_card Proxy.Proxy
               let _ = Hs.pure CardMaybeNameOnCardNameOnCard <*>
                         HsJSONPB.asProxy declare_name_on_card
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CardMaybeNameOnCard",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("name_on_card",
                                                         cardMaybeNameOnCardNameOnCard)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data CardMaybeCardGlobalFingerprint = CardMaybeCardGlobalFingerprintCardGlobalFingerprint Hs.Text
                                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CardMaybeCardGlobalFingerprint where
        nameOf _ = (Hs.fromString "CardMaybeCardGlobalFingerprint")
 
instance HsJSONPB.ToSchema CardMaybeCardGlobalFingerprint where
        declareNamedSchema _
          = do let declare_card_global_fingerprint
                     = HsJSONPB.declareSchemaRef
               cardMaybeCardGlobalFingerprintCardGlobalFingerprint <- declare_card_global_fingerprint
                                                                        Proxy.Proxy
               let _ = Hs.pure CardMaybeCardGlobalFingerprintCardGlobalFingerprint
                         <*> HsJSONPB.asProxy declare_card_global_fingerprint
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CardMaybeCardGlobalFingerprint",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_global_fingerprint",
                                                         cardMaybeCardGlobalFingerprintCardGlobalFingerprint)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data CardMaybeNickname = CardMaybeNicknameNickname Hs.Text
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CardMaybeNickname where
        nameOf _ = (Hs.fromString "CardMaybeNickname")
 
instance HsJSONPB.ToSchema CardMaybeNickname where
        declareNamedSchema _
          = do let declare_nickname = HsJSONPB.declareSchemaRef
               cardMaybeNicknameNickname <- declare_nickname Proxy.Proxy
               let _ = Hs.pure CardMaybeNicknameNickname <*>
                         HsJSONPB.asProxy declare_nickname
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CardMaybeNickname",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("nickname", cardMaybeNicknameNickname)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data CardMaybeCardType = CardMaybeCardTypeCardType (HsProtobuf.Enumerated
                                                      Euler.Proto.Event.Card.CardType)
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CardMaybeCardType where
        nameOf _ = (Hs.fromString "CardMaybeCardType")
 
instance HsJSONPB.ToSchema CardMaybeCardType where
        declareNamedSchema _
          = do let declare_card_type = HsJSONPB.declareSchemaRef
               cardMaybeCardTypeCardType <- declare_card_type Proxy.Proxy
               let _ = Hs.pure CardMaybeCardTypeCardType <*>
                         HsJSONPB.asProxy declare_card_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CardMaybeCardType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_type", cardMaybeCardTypeCardType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data CardMaybeCardIssuer = CardMaybeCardIssuerCardIssuer Hs.Text
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CardMaybeCardIssuer where
        nameOf _ = (Hs.fromString "CardMaybeCardIssuer")
 
instance HsJSONPB.ToSchema CardMaybeCardIssuer where
        declareNamedSchema _
          = do let declare_card_issuer = HsJSONPB.declareSchemaRef
               cardMaybeCardIssuerCardIssuer <- declare_card_issuer Proxy.Proxy
               let _ = Hs.pure CardMaybeCardIssuerCardIssuer <*>
                         HsJSONPB.asProxy declare_card_issuer
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CardMaybeCardIssuer",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_issuer",
                                                         cardMaybeCardIssuerCardIssuer)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data CardMaybeCardBrand = CardMaybeCardBrandCardBrand Hs.Text
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CardMaybeCardBrand where
        nameOf _ = (Hs.fromString "CardMaybeCardBrand")
 
instance HsJSONPB.ToSchema CardMaybeCardBrand where
        declareNamedSchema _
          = do let declare_card_brand = HsJSONPB.declareSchemaRef
               cardMaybeCardBrandCardBrand <- declare_card_brand Proxy.Proxy
               let _ = Hs.pure CardMaybeCardBrandCardBrand <*>
                         HsJSONPB.asProxy declare_card_brand
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CardMaybeCardBrand",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_brand",
                                                         cardMaybeCardBrandCardBrand)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data CardMaybeCardToken = CardMaybeCardTokenCardToken Hs.Text
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CardMaybeCardToken where
        nameOf _ = (Hs.fromString "CardMaybeCardToken")
 
instance HsJSONPB.ToSchema CardMaybeCardToken where
        declareNamedSchema _
          = do let declare_card_token = HsJSONPB.declareSchemaRef
               cardMaybeCardTokenCardToken <- declare_card_token Proxy.Proxy
               let _ = Hs.pure CardMaybeCardTokenCardToken <*>
                         HsJSONPB.asProxy declare_card_token
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CardMaybeCardToken",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_token",
                                                         cardMaybeCardTokenCardToken)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data VaultProvider = VaultProviderNO_VAULT_PROVIDER
                   | VaultProviderJUSPAY
                   | VaultProviderPAYU
                   | VaultProviderSODEXO
                   deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named VaultProvider where
        nameOf _ = (Hs.fromString "VaultProvider")
 
instance HsProtobuf.HasDefault VaultProvider
 
instance Hs.Bounded VaultProvider where
        minBound = VaultProviderNO_VAULT_PROVIDER
        maxBound = VaultProviderSODEXO
 
instance Hs.Ord VaultProvider where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum VaultProvider where
        toProtoEnumMay 0 = Hs.Just VaultProviderNO_VAULT_PROVIDER
        toProtoEnumMay 1 = Hs.Just VaultProviderJUSPAY
        toProtoEnumMay 2 = Hs.Just VaultProviderPAYU
        toProtoEnumMay 3 = Hs.Just VaultProviderSODEXO
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (VaultProviderNO_VAULT_PROVIDER) = 0
        fromProtoEnum (VaultProviderJUSPAY) = 1
        fromProtoEnum (VaultProviderPAYU) = 2
        fromProtoEnum (VaultProviderSODEXO) = 3
 
instance HsJSONPB.ToJSONPB VaultProvider where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB VaultProvider where
        parseJSONPB (HsJSONPB.String "NO_VAULT_PROVIDER")
          = Hs.pure VaultProviderNO_VAULT_PROVIDER
        parseJSONPB (HsJSONPB.String "JUSPAY")
          = Hs.pure VaultProviderJUSPAY
        parseJSONPB (HsJSONPB.String "PAYU") = Hs.pure VaultProviderPAYU
        parseJSONPB (HsJSONPB.String "SODEXO")
          = Hs.pure VaultProviderSODEXO
        parseJSONPB v = (HsJSONPB.typeMismatch "VaultProvider" v)
 
instance HsJSONPB.ToJSON VaultProvider where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON VaultProvider where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite VaultProvider
 
data CardType = CardTypeNO_CARD_TYPE
              | CardTypeCREDIT
              | CardTypeDEBIT
              | CardTypePREPAID
              | CardTypeNB
              | CardTypeWALLET
              | CardTypePAY_LATER
              | CardTypeUPI
              | CardTypeATM_CARD
              | CardTypeREWARD
              deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CardType where
        nameOf _ = (Hs.fromString "CardType")
 
instance HsProtobuf.HasDefault CardType
 
instance Hs.Bounded CardType where
        minBound = CardTypeNO_CARD_TYPE
        maxBound = CardTypeREWARD
 
instance Hs.Ord CardType where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum CardType where
        toProtoEnumMay 0 = Hs.Just CardTypeNO_CARD_TYPE
        toProtoEnumMay 1 = Hs.Just CardTypeCREDIT
        toProtoEnumMay 2 = Hs.Just CardTypeDEBIT
        toProtoEnumMay 3 = Hs.Just CardTypePREPAID
        toProtoEnumMay 4 = Hs.Just CardTypeNB
        toProtoEnumMay 5 = Hs.Just CardTypeWALLET
        toProtoEnumMay 6 = Hs.Just CardTypePAY_LATER
        toProtoEnumMay 7 = Hs.Just CardTypeUPI
        toProtoEnumMay 8 = Hs.Just CardTypeATM_CARD
        toProtoEnumMay 9 = Hs.Just CardTypeREWARD
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (CardTypeNO_CARD_TYPE) = 0
        fromProtoEnum (CardTypeCREDIT) = 1
        fromProtoEnum (CardTypeDEBIT) = 2
        fromProtoEnum (CardTypePREPAID) = 3
        fromProtoEnum (CardTypeNB) = 4
        fromProtoEnum (CardTypeWALLET) = 5
        fromProtoEnum (CardTypePAY_LATER) = 6
        fromProtoEnum (CardTypeUPI) = 7
        fromProtoEnum (CardTypeATM_CARD) = 8
        fromProtoEnum (CardTypeREWARD) = 9
 
instance HsJSONPB.ToJSONPB CardType where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB CardType where
        parseJSONPB (HsJSONPB.String "NO_CARD_TYPE")
          = Hs.pure CardTypeNO_CARD_TYPE
        parseJSONPB (HsJSONPB.String "CREDIT") = Hs.pure CardTypeCREDIT
        parseJSONPB (HsJSONPB.String "DEBIT") = Hs.pure CardTypeDEBIT
        parseJSONPB (HsJSONPB.String "PREPAID") = Hs.pure CardTypePREPAID
        parseJSONPB (HsJSONPB.String "NB") = Hs.pure CardTypeNB
        parseJSONPB (HsJSONPB.String "WALLET") = Hs.pure CardTypeWALLET
        parseJSONPB (HsJSONPB.String "PAY_LATER")
          = Hs.pure CardTypePAY_LATER
        parseJSONPB (HsJSONPB.String "UPI") = Hs.pure CardTypeUPI
        parseJSONPB (HsJSONPB.String "ATM_CARD") = Hs.pure CardTypeATM_CARD
        parseJSONPB (HsJSONPB.String "REWARD") = Hs.pure CardTypeREWARD
        parseJSONPB v = (HsJSONPB.typeMismatch "CardType" v)
 
instance HsJSONPB.ToJSON CardType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CardType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite CardType
 
data CardEventType = CardEventTypeNO_CARD_EVENT_TYPE
                   | CardEventTypeCARD_EVENT_CREATE
                   | CardEventTypeCARD_EVENT_UPDATE
                   deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named CardEventType where
        nameOf _ = (Hs.fromString "CardEventType")
 
instance HsProtobuf.HasDefault CardEventType
 
instance Hs.Bounded CardEventType where
        minBound = CardEventTypeNO_CARD_EVENT_TYPE
        maxBound = CardEventTypeCARD_EVENT_UPDATE
 
instance Hs.Ord CardEventType where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum CardEventType where
        toProtoEnumMay 0 = Hs.Just CardEventTypeNO_CARD_EVENT_TYPE
        toProtoEnumMay 1 = Hs.Just CardEventTypeCARD_EVENT_CREATE
        toProtoEnumMay 2 = Hs.Just CardEventTypeCARD_EVENT_UPDATE
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (CardEventTypeNO_CARD_EVENT_TYPE) = 0
        fromProtoEnum (CardEventTypeCARD_EVENT_CREATE) = 1
        fromProtoEnum (CardEventTypeCARD_EVENT_UPDATE) = 2
 
instance HsJSONPB.ToJSONPB CardEventType where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB CardEventType where
        parseJSONPB (HsJSONPB.String "NO_CARD_EVENT_TYPE")
          = Hs.pure CardEventTypeNO_CARD_EVENT_TYPE
        parseJSONPB (HsJSONPB.String "CARD_EVENT_CREATE")
          = Hs.pure CardEventTypeCARD_EVENT_CREATE
        parseJSONPB (HsJSONPB.String "CARD_EVENT_UPDATE")
          = Hs.pure CardEventTypeCARD_EVENT_UPDATE
        parseJSONPB v = (HsJSONPB.typeMismatch "CardEventType" v)
 
instance HsJSONPB.ToJSON CardEventType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON CardEventType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite CardEventType