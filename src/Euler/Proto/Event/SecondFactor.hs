{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Euler.Proto.Event.SecondFactor where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data SecondFactor = SecondFactor{secondFactorId :: Hs.Int64,
                                 secondFactorVersion :: Hs.Int64, secondFactorStatus :: Hs.Text,
                                 secondFactorTxnId :: Hs.Text, secondFactorSfType :: Hs.Text,
                                 secondFactorDateCreated :: Hs.Int64,
                                 secondFactorLastUpdated :: Hs.Int64,
                                 secondFactorMaybeUrl :: Hs.Maybe SecondFactorMaybeUrl,
                                 secondFactorMaybeOtp :: Hs.Maybe SecondFactorMaybeOtp,
                                 secondFactorMaybeSecondFactorResponse ::
                                 Hs.Maybe SecondFactorMaybeSecondFactorResponse,
                                 secondFactorMaybeEpgTxnId :: Hs.Maybe SecondFactorMaybeEpgTxnId,
                                 secondFactorMaybeTxnDetailId ::
                                 Hs.Maybe SecondFactorMaybeTxnDetailId,
                                 secondFactorMaybeGatewayAuthReqParams ::
                                 Hs.Maybe SecondFactorMaybeGatewayAuthReqParams,
                                 secondFactorMaybeAuthenticationAccountId ::
                                 Hs.Maybe SecondFactorMaybeAuthenticationAccountId,
                                 secondFactorMaybeCanAcceptResponse ::
                                 Hs.Maybe SecondFactorMaybeCanAcceptResponse,
                                 secondFactorMaybeChallengesAttempted ::
                                 Hs.Maybe SecondFactorMaybeChallengesAttempted,
                                 secondFactorMaybeResponseAttempted ::
                                 Hs.Maybe SecondFactorMaybeResponseAttempted,
                                 secondFactorSecondFactorEventType ::
                                 HsProtobuf.Enumerated
                                   Euler.Proto.Event.SecondFactor.SecondFactorEventType}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SecondFactor where
        nameOf _ = (Hs.fromString "SecondFactor")
 
instance HsProtobuf.HasDefault SecondFactor
 
instance HsProtobuf.Message SecondFactor where
        encodeMessage _
          SecondFactor{secondFactorId = secondFactorId,
                       secondFactorVersion = secondFactorVersion,
                       secondFactorStatus = secondFactorStatus,
                       secondFactorTxnId = secondFactorTxnId,
                       secondFactorSfType = secondFactorSfType,
                       secondFactorDateCreated = secondFactorDateCreated,
                       secondFactorLastUpdated = secondFactorLastUpdated,
                       secondFactorMaybeUrl = secondFactorMaybeUrl,
                       secondFactorMaybeOtp = secondFactorMaybeOtp,
                       secondFactorMaybeSecondFactorResponse =
                         secondFactorMaybeSecondFactorResponse,
                       secondFactorMaybeEpgTxnId = secondFactorMaybeEpgTxnId,
                       secondFactorMaybeTxnDetailId = secondFactorMaybeTxnDetailId,
                       secondFactorMaybeGatewayAuthReqParams =
                         secondFactorMaybeGatewayAuthReqParams,
                       secondFactorMaybeAuthenticationAccountId =
                         secondFactorMaybeAuthenticationAccountId,
                       secondFactorMaybeCanAcceptResponse =
                         secondFactorMaybeCanAcceptResponse,
                       secondFactorMaybeChallengesAttempted =
                         secondFactorMaybeChallengesAttempted,
                       secondFactorMaybeResponseAttempted =
                         secondFactorMaybeResponseAttempted,
                       secondFactorSecondFactorEventType =
                         secondFactorSecondFactorEventType}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   secondFactorId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   secondFactorVersion),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   secondFactorStatus),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   secondFactorTxnId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   secondFactorSfType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   secondFactorDateCreated),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                   secondFactorLastUpdated),
                case secondFactorMaybeUrl of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             SecondFactorMaybeUrlUrl y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 9)
                                     (HsProtobuf.ForceEmit y)),
                case secondFactorMaybeOtp of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             SecondFactorMaybeOtpOtp y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 10)
                                     (HsProtobuf.ForceEmit y)),
                case secondFactorMaybeSecondFactorResponse of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             SecondFactorMaybeSecondFactorResponseSecondFactorResponse y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 11)
                                     (HsProtobuf.ForceEmit y)),
                case secondFactorMaybeEpgTxnId of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             SecondFactorMaybeEpgTxnIdEpgTxnId y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 12)
                                     (HsProtobuf.ForceEmit y)),
                case secondFactorMaybeTxnDetailId of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             SecondFactorMaybeTxnDetailIdTxnDetailId y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 13)
                                     (HsProtobuf.ForceEmit y)),
                case secondFactorMaybeGatewayAuthReqParams of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             SecondFactorMaybeGatewayAuthReqParamsGatewayAuthReqParams y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 14)
                                     (HsProtobuf.ForceEmit y)),
                case secondFactorMaybeAuthenticationAccountId of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             SecondFactorMaybeAuthenticationAccountIdAuthenticationAccountId y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 15)
                                     (HsProtobuf.ForceEmit y)),
                case secondFactorMaybeCanAcceptResponse of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             SecondFactorMaybeCanAcceptResponseCanAcceptResponse y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 16)
                                     (HsProtobuf.ForceEmit y)),
                case secondFactorMaybeChallengesAttempted of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             SecondFactorMaybeChallengesAttemptedChallengesAttempted y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 17)
                                     (HsProtobuf.ForceEmit y)),
                case secondFactorMaybeResponseAttempted of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             SecondFactorMaybeResponseAttemptedResponseAttempted y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 18)
                                     (HsProtobuf.ForceEmit y)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                   secondFactorSecondFactorEventType)])
        decodeMessage _
          = (Hs.pure SecondFactor) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 6))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 7))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 9),
                   (Hs.pure (Hs.Just Hs.. SecondFactorMaybeUrlUrl)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 10),
                   (Hs.pure (Hs.Just Hs.. SecondFactorMaybeOtpOtp)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 11),
                   (Hs.pure
                      (Hs.Just Hs..
                         SecondFactorMaybeSecondFactorResponseSecondFactorResponse))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 12),
                   (Hs.pure (Hs.Just Hs.. SecondFactorMaybeEpgTxnIdEpgTxnId)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 13),
                   (Hs.pure (Hs.Just Hs.. SecondFactorMaybeTxnDetailIdTxnDetailId))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 14),
                   (Hs.pure
                      (Hs.Just Hs..
                         SecondFactorMaybeGatewayAuthReqParamsGatewayAuthReqParams))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 15),
                   (Hs.pure
                      (Hs.Just Hs..
                         SecondFactorMaybeAuthenticationAccountIdAuthenticationAccountId))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 16),
                   (Hs.pure
                      (Hs.Just Hs.. SecondFactorMaybeCanAcceptResponseCanAcceptResponse))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 17),
                   (Hs.pure
                      (Hs.Just Hs..
                         SecondFactorMaybeChallengesAttemptedChallengesAttempted))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 18),
                   (Hs.pure
                      (Hs.Just Hs.. SecondFactorMaybeResponseAttemptedResponseAttempted))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 8))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "version")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "status")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "txn_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "sf_type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "date_created")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 7)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "last_updated")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 8)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "SecondFactorEventType")))
                (HsProtobuf.Single "second_factor_event_type")
                []
                "")]
 
instance HsJSONPB.ToJSONPB SecondFactor where
        toJSONPB
          (SecondFactor f1 f2 f3 f4 f5 f6 f7 f9 f10 f11 f12 f13 f14 f15 f16
             f17 f18 f8)
          = (HsJSONPB.object
               ["id" .= f1, "version" .= f2, "status" .= f3, "txn_id" .= f4,
                "sf_type" .= f5, "date_created" .= f6, "last_updated" .= f7,
                (let encodeMaybe_url
                       = (case f9 of
                              Hs.Just (SecondFactorMaybeUrlUrl f9) -> (HsJSONPB.pair "url" f9)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_url" .= (HsJSONPB.objectOrNull [encodeMaybe_url] options))
                         options
                       else encodeMaybe_url options),
                (let encodeMaybe_otp
                       = (case f10 of
                              Hs.Just (SecondFactorMaybeOtpOtp f10) -> (HsJSONPB.pair "otp" f10)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_otp" .= (HsJSONPB.objectOrNull [encodeMaybe_otp] options))
                         options
                       else encodeMaybe_otp options),
                (let encodeMaybe_second_factor_response
                       = (case f11 of
                              Hs.Just
                                (SecondFactorMaybeSecondFactorResponseSecondFactorResponse f11)
                                -> (HsJSONPB.pair "second_factor_response" f11)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_second_factor_response" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_second_factor_response]
                             options))
                         options
                       else encodeMaybe_second_factor_response options),
                (let encodeMaybe_epg_txn_id
                       = (case f12 of
                              Hs.Just (SecondFactorMaybeEpgTxnIdEpgTxnId f12)
                                -> (HsJSONPB.pair "epg_txn_id" f12)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_epg_txn_id" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_epg_txn_id] options))
                         options
                       else encodeMaybe_epg_txn_id options),
                (let encodeMaybe_txn_detail_id
                       = (case f13 of
                              Hs.Just (SecondFactorMaybeTxnDetailIdTxnDetailId f13)
                                -> (HsJSONPB.pair "txn_detail_id" f13)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_txn_detail_id" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_txn_detail_id] options))
                         options
                       else encodeMaybe_txn_detail_id options),
                (let encodeMaybe_gateway_auth_req_params
                       = (case f14 of
                              Hs.Just
                                (SecondFactorMaybeGatewayAuthReqParamsGatewayAuthReqParams f14)
                                -> (HsJSONPB.pair "gateway_auth_req_params" f14)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_gateway_auth_req_params" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_gateway_auth_req_params]
                             options))
                         options
                       else encodeMaybe_gateway_auth_req_params options),
                (let encodeMaybe_authentication_account_id
                       = (case f15 of
                              Hs.Just
                                (SecondFactorMaybeAuthenticationAccountIdAuthenticationAccountId
                                   f15)
                                -> (HsJSONPB.pair "authentication_account_id" f15)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_authentication_account_id" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_authentication_account_id]
                             options))
                         options
                       else encodeMaybe_authentication_account_id options),
                (let encodeMaybe_can_accept_response
                       = (case f16 of
                              Hs.Just (SecondFactorMaybeCanAcceptResponseCanAcceptResponse f16)
                                -> (HsJSONPB.pair "can_accept_response" f16)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_can_accept_response" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_can_accept_response] options))
                         options
                       else encodeMaybe_can_accept_response options),
                (let encodeMaybe_challenges_attempted
                       = (case f17 of
                              Hs.Just
                                (SecondFactorMaybeChallengesAttemptedChallengesAttempted f17)
                                -> (HsJSONPB.pair "challenges_attempted" f17)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_challenges_attempted" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_challenges_attempted] options))
                         options
                       else encodeMaybe_challenges_attempted options),
                (let encodeMaybe_response_attempted
                       = (case f18 of
                              Hs.Just (SecondFactorMaybeResponseAttemptedResponseAttempted f18)
                                -> (HsJSONPB.pair "response_attempted" f18)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_response_attempted" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_response_attempted] options))
                         options
                       else encodeMaybe_response_attempted options),
                "second_factor_event_type" .= f8])
        toEncodingPB
          (SecondFactor f1 f2 f3 f4 f5 f6 f7 f9 f10 f11 f12 f13 f14 f15 f16
             f17 f18 f8)
          = (HsJSONPB.pairs
               ["id" .= f1, "version" .= f2, "status" .= f3, "txn_id" .= f4,
                "sf_type" .= f5, "date_created" .= f6, "last_updated" .= f7,
                (let encodeMaybe_url
                       = (case f9 of
                              Hs.Just (SecondFactorMaybeUrlUrl f9) -> (HsJSONPB.pair "url" f9)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_url" .= (HsJSONPB.pairsOrNull [encodeMaybe_url] options))
                         options
                       else encodeMaybe_url options),
                (let encodeMaybe_otp
                       = (case f10 of
                              Hs.Just (SecondFactorMaybeOtpOtp f10) -> (HsJSONPB.pair "otp" f10)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_otp" .= (HsJSONPB.pairsOrNull [encodeMaybe_otp] options))
                         options
                       else encodeMaybe_otp options),
                (let encodeMaybe_second_factor_response
                       = (case f11 of
                              Hs.Just
                                (SecondFactorMaybeSecondFactorResponseSecondFactorResponse f11)
                                -> (HsJSONPB.pair "second_factor_response" f11)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_second_factor_response" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_second_factor_response]
                             options))
                         options
                       else encodeMaybe_second_factor_response options),
                (let encodeMaybe_epg_txn_id
                       = (case f12 of
                              Hs.Just (SecondFactorMaybeEpgTxnIdEpgTxnId f12)
                                -> (HsJSONPB.pair "epg_txn_id" f12)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_epg_txn_id" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_epg_txn_id] options))
                         options
                       else encodeMaybe_epg_txn_id options),
                (let encodeMaybe_txn_detail_id
                       = (case f13 of
                              Hs.Just (SecondFactorMaybeTxnDetailIdTxnDetailId f13)
                                -> (HsJSONPB.pair "txn_detail_id" f13)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_txn_detail_id" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_txn_detail_id] options))
                         options
                       else encodeMaybe_txn_detail_id options),
                (let encodeMaybe_gateway_auth_req_params
                       = (case f14 of
                              Hs.Just
                                (SecondFactorMaybeGatewayAuthReqParamsGatewayAuthReqParams f14)
                                -> (HsJSONPB.pair "gateway_auth_req_params" f14)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_gateway_auth_req_params" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_gateway_auth_req_params]
                             options))
                         options
                       else encodeMaybe_gateway_auth_req_params options),
                (let encodeMaybe_authentication_account_id
                       = (case f15 of
                              Hs.Just
                                (SecondFactorMaybeAuthenticationAccountIdAuthenticationAccountId
                                   f15)
                                -> (HsJSONPB.pair "authentication_account_id" f15)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_authentication_account_id" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_authentication_account_id]
                             options))
                         options
                       else encodeMaybe_authentication_account_id options),
                (let encodeMaybe_can_accept_response
                       = (case f16 of
                              Hs.Just (SecondFactorMaybeCanAcceptResponseCanAcceptResponse f16)
                                -> (HsJSONPB.pair "can_accept_response" f16)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_can_accept_response" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_can_accept_response] options))
                         options
                       else encodeMaybe_can_accept_response options),
                (let encodeMaybe_challenges_attempted
                       = (case f17 of
                              Hs.Just
                                (SecondFactorMaybeChallengesAttemptedChallengesAttempted f17)
                                -> (HsJSONPB.pair "challenges_attempted" f17)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_challenges_attempted" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_challenges_attempted] options))
                         options
                       else encodeMaybe_challenges_attempted options),
                (let encodeMaybe_response_attempted
                       = (case f18 of
                              Hs.Just (SecondFactorMaybeResponseAttemptedResponseAttempted f18)
                                -> (HsJSONPB.pair "response_attempted" f18)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_response_attempted" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_response_attempted] options))
                         options
                       else encodeMaybe_response_attempted options),
                "second_factor_event_type" .= f8])
 
instance HsJSONPB.FromJSONPB SecondFactor where
        parseJSONPB
          = (HsJSONPB.withObject "SecondFactor"
               (\ obj ->
                  (Hs.pure SecondFactor) <*> obj .: "id" <*> obj .: "version" <*>
                    obj .: "status"
                    <*> obj .: "txn_id"
                    <*> obj .: "sf_type"
                    <*> obj .: "date_created"
                    <*> obj .: "last_updated"
                    <*>
                    (let parseMaybe_url parseObj
                           = Hs.msum
                               [Hs.Just Hs.. SecondFactorMaybeUrlUrl <$>
                                  (HsJSONPB.parseField parseObj "url"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_url") Hs.>>=
                          (HsJSONPB.withObject "maybe_url" parseMaybe_url))
                         <|> (parseMaybe_url obj))
                    <*>
                    (let parseMaybe_otp parseObj
                           = Hs.msum
                               [Hs.Just Hs.. SecondFactorMaybeOtpOtp <$>
                                  (HsJSONPB.parseField parseObj "otp"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_otp") Hs.>>=
                          (HsJSONPB.withObject "maybe_otp" parseMaybe_otp))
                         <|> (parseMaybe_otp obj))
                    <*>
                    (let parseMaybe_second_factor_response parseObj
                           = Hs.msum
                               [Hs.Just Hs..
                                  SecondFactorMaybeSecondFactorResponseSecondFactorResponse
                                  <$> (HsJSONPB.parseField parseObj "second_factor_response"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_second_factor_response") Hs.>>=
                          (HsJSONPB.withObject "maybe_second_factor_response"
                             parseMaybe_second_factor_response))
                         <|> (parseMaybe_second_factor_response obj))
                    <*>
                    (let parseMaybe_epg_txn_id parseObj
                           = Hs.msum
                               [Hs.Just Hs.. SecondFactorMaybeEpgTxnIdEpgTxnId <$>
                                  (HsJSONPB.parseField parseObj "epg_txn_id"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_epg_txn_id") Hs.>>=
                          (HsJSONPB.withObject "maybe_epg_txn_id" parseMaybe_epg_txn_id))
                         <|> (parseMaybe_epg_txn_id obj))
                    <*>
                    (let parseMaybe_txn_detail_id parseObj
                           = Hs.msum
                               [Hs.Just Hs.. SecondFactorMaybeTxnDetailIdTxnDetailId <$>
                                  (HsJSONPB.parseField parseObj "txn_detail_id"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_txn_detail_id") Hs.>>=
                          (HsJSONPB.withObject "maybe_txn_detail_id"
                             parseMaybe_txn_detail_id))
                         <|> (parseMaybe_txn_detail_id obj))
                    <*>
                    (let parseMaybe_gateway_auth_req_params parseObj
                           = Hs.msum
                               [Hs.Just Hs..
                                  SecondFactorMaybeGatewayAuthReqParamsGatewayAuthReqParams
                                  <$> (HsJSONPB.parseField parseObj "gateway_auth_req_params"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_gateway_auth_req_params") Hs.>>=
                          (HsJSONPB.withObject "maybe_gateway_auth_req_params"
                             parseMaybe_gateway_auth_req_params))
                         <|> (parseMaybe_gateway_auth_req_params obj))
                    <*>
                    (let parseMaybe_authentication_account_id parseObj
                           = Hs.msum
                               [Hs.Just Hs..
                                  SecondFactorMaybeAuthenticationAccountIdAuthenticationAccountId
                                  <$> (HsJSONPB.parseField parseObj "authentication_account_id"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_authentication_account_id") Hs.>>=
                          (HsJSONPB.withObject "maybe_authentication_account_id"
                             parseMaybe_authentication_account_id))
                         <|> (parseMaybe_authentication_account_id obj))
                    <*>
                    (let parseMaybe_can_accept_response parseObj
                           = Hs.msum
                               [Hs.Just Hs.. SecondFactorMaybeCanAcceptResponseCanAcceptResponse
                                  <$> (HsJSONPB.parseField parseObj "can_accept_response"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_can_accept_response") Hs.>>=
                          (HsJSONPB.withObject "maybe_can_accept_response"
                             parseMaybe_can_accept_response))
                         <|> (parseMaybe_can_accept_response obj))
                    <*>
                    (let parseMaybe_challenges_attempted parseObj
                           = Hs.msum
                               [Hs.Just Hs..
                                  SecondFactorMaybeChallengesAttemptedChallengesAttempted
                                  <$> (HsJSONPB.parseField parseObj "challenges_attempted"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_challenges_attempted") Hs.>>=
                          (HsJSONPB.withObject "maybe_challenges_attempted"
                             parseMaybe_challenges_attempted))
                         <|> (parseMaybe_challenges_attempted obj))
                    <*>
                    (let parseMaybe_response_attempted parseObj
                           = Hs.msum
                               [Hs.Just Hs.. SecondFactorMaybeResponseAttemptedResponseAttempted
                                  <$> (HsJSONPB.parseField parseObj "response_attempted"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_response_attempted") Hs.>>=
                          (HsJSONPB.withObject "maybe_response_attempted"
                             parseMaybe_response_attempted))
                         <|> (parseMaybe_response_attempted obj))
                    <*> obj .: "second_factor_event_type"))
 
instance HsJSONPB.ToJSON SecondFactor where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SecondFactor where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema SecondFactor where
        declareNamedSchema _
          = do let declare_id = HsJSONPB.declareSchemaRef
               secondFactorId <- declare_id Proxy.Proxy
               let declare_version = HsJSONPB.declareSchemaRef
               secondFactorVersion <- declare_version Proxy.Proxy
               let declare_status = HsJSONPB.declareSchemaRef
               secondFactorStatus <- declare_status Proxy.Proxy
               let declare_txn_id = HsJSONPB.declareSchemaRef
               secondFactorTxnId <- declare_txn_id Proxy.Proxy
               let declare_sf_type = HsJSONPB.declareSchemaRef
               secondFactorSfType <- declare_sf_type Proxy.Proxy
               let declare_date_created = HsJSONPB.declareSchemaRef
               secondFactorDateCreated <- declare_date_created Proxy.Proxy
               let declare_last_updated = HsJSONPB.declareSchemaRef
               secondFactorLastUpdated <- declare_last_updated Proxy.Proxy
               let declare_maybe_url = HsJSONPB.declareSchemaRef
               secondFactorMaybeUrl <- declare_maybe_url Proxy.Proxy
               let declare_maybe_otp = HsJSONPB.declareSchemaRef
               secondFactorMaybeOtp <- declare_maybe_otp Proxy.Proxy
               let declare_maybe_second_factor_response
                     = HsJSONPB.declareSchemaRef
               secondFactorMaybeSecondFactorResponse <- declare_maybe_second_factor_response
                                                          Proxy.Proxy
               let declare_maybe_epg_txn_id = HsJSONPB.declareSchemaRef
               secondFactorMaybeEpgTxnId <- declare_maybe_epg_txn_id Proxy.Proxy
               let declare_maybe_txn_detail_id = HsJSONPB.declareSchemaRef
               secondFactorMaybeTxnDetailId <- declare_maybe_txn_detail_id
                                                 Proxy.Proxy
               let declare_maybe_gateway_auth_req_params
                     = HsJSONPB.declareSchemaRef
               secondFactorMaybeGatewayAuthReqParams <- declare_maybe_gateway_auth_req_params
                                                          Proxy.Proxy
               let declare_maybe_authentication_account_id
                     = HsJSONPB.declareSchemaRef
               secondFactorMaybeAuthenticationAccountId <- declare_maybe_authentication_account_id
                                                             Proxy.Proxy
               let declare_maybe_can_accept_response = HsJSONPB.declareSchemaRef
               secondFactorMaybeCanAcceptResponse <- declare_maybe_can_accept_response
                                                       Proxy.Proxy
               let declare_maybe_challenges_attempted = HsJSONPB.declareSchemaRef
               secondFactorMaybeChallengesAttempted <- declare_maybe_challenges_attempted
                                                         Proxy.Proxy
               let declare_maybe_response_attempted = HsJSONPB.declareSchemaRef
               secondFactorMaybeResponseAttempted <- declare_maybe_response_attempted
                                                       Proxy.Proxy
               let declare_second_factor_event_type = HsJSONPB.declareSchemaRef
               secondFactorSecondFactorEventType <- declare_second_factor_event_type
                                                      Proxy.Proxy
               let _ = Hs.pure SecondFactor <*> HsJSONPB.asProxy declare_id <*>
                         HsJSONPB.asProxy declare_version
                         <*> HsJSONPB.asProxy declare_status
                         <*> HsJSONPB.asProxy declare_txn_id
                         <*> HsJSONPB.asProxy declare_sf_type
                         <*> HsJSONPB.asProxy declare_date_created
                         <*> HsJSONPB.asProxy declare_last_updated
                         <*> HsJSONPB.asProxy declare_maybe_url
                         <*> HsJSONPB.asProxy declare_maybe_otp
                         <*> HsJSONPB.asProxy declare_maybe_second_factor_response
                         <*> HsJSONPB.asProxy declare_maybe_epg_txn_id
                         <*> HsJSONPB.asProxy declare_maybe_txn_detail_id
                         <*> HsJSONPB.asProxy declare_maybe_gateway_auth_req_params
                         <*> HsJSONPB.asProxy declare_maybe_authentication_account_id
                         <*> HsJSONPB.asProxy declare_maybe_can_accept_response
                         <*> HsJSONPB.asProxy declare_maybe_challenges_attempted
                         <*> HsJSONPB.asProxy declare_maybe_response_attempted
                         <*> HsJSONPB.asProxy declare_second_factor_event_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SecondFactor",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("id", secondFactorId),
                                                        ("version", secondFactorVersion),
                                                        ("status", secondFactorStatus),
                                                        ("txn_id", secondFactorTxnId),
                                                        ("sf_type", secondFactorSfType),
                                                        ("date_created", secondFactorDateCreated),
                                                        ("last_updated", secondFactorLastUpdated),
                                                        ("maybe_url", secondFactorMaybeUrl),
                                                        ("maybe_otp", secondFactorMaybeOtp),
                                                        ("maybe_second_factor_response",
                                                         secondFactorMaybeSecondFactorResponse),
                                                        ("maybe_epg_txn_id",
                                                         secondFactorMaybeEpgTxnId),
                                                        ("maybe_txn_detail_id",
                                                         secondFactorMaybeTxnDetailId),
                                                        ("maybe_gateway_auth_req_params",
                                                         secondFactorMaybeGatewayAuthReqParams),
                                                        ("maybe_authentication_account_id",
                                                         secondFactorMaybeAuthenticationAccountId),
                                                        ("maybe_can_accept_response",
                                                         secondFactorMaybeCanAcceptResponse),
                                                        ("maybe_challenges_attempted",
                                                         secondFactorMaybeChallengesAttempted),
                                                        ("maybe_response_attempted",
                                                         secondFactorMaybeResponseAttempted),
                                                        ("second_factor_event_type",
                                                         secondFactorSecondFactorEventType)]}})
 
data SecondFactorMaybeUrl = SecondFactorMaybeUrlUrl Hs.Text
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SecondFactorMaybeUrl where
        nameOf _ = (Hs.fromString "SecondFactorMaybeUrl")
 
instance HsJSONPB.ToSchema SecondFactorMaybeUrl where
        declareNamedSchema _
          = do let declare_url = HsJSONPB.declareSchemaRef
               secondFactorMaybeUrlUrl <- declare_url Proxy.Proxy
               let _ = Hs.pure SecondFactorMaybeUrlUrl <*>
                         HsJSONPB.asProxy declare_url
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SecondFactorMaybeUrl",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("url", secondFactorMaybeUrlUrl)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data SecondFactorMaybeOtp = SecondFactorMaybeOtpOtp Hs.Text
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SecondFactorMaybeOtp where
        nameOf _ = (Hs.fromString "SecondFactorMaybeOtp")
 
instance HsJSONPB.ToSchema SecondFactorMaybeOtp where
        declareNamedSchema _
          = do let declare_otp = HsJSONPB.declareSchemaRef
               secondFactorMaybeOtpOtp <- declare_otp Proxy.Proxy
               let _ = Hs.pure SecondFactorMaybeOtpOtp <*>
                         HsJSONPB.asProxy declare_otp
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SecondFactorMaybeOtp",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("otp", secondFactorMaybeOtpOtp)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data SecondFactorMaybeSecondFactorResponse = SecondFactorMaybeSecondFactorResponseSecondFactorResponse Hs.Text
                                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SecondFactorMaybeSecondFactorResponse
         where
        nameOf _ = (Hs.fromString "SecondFactorMaybeSecondFactorResponse")
 
instance HsJSONPB.ToSchema SecondFactorMaybeSecondFactorResponse
         where
        declareNamedSchema _
          = do let declare_second_factor_response = HsJSONPB.declareSchemaRef
               secondFactorMaybeSecondFactorResponseSecondFactorResponse <- declare_second_factor_response
                                                                              Proxy.Proxy
               let _ = Hs.pure
                         SecondFactorMaybeSecondFactorResponseSecondFactorResponse
                         <*> HsJSONPB.asProxy declare_second_factor_response
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SecondFactorMaybeSecondFactorResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("second_factor_response",
                                                         secondFactorMaybeSecondFactorResponseSecondFactorResponse)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data SecondFactorMaybeEpgTxnId = SecondFactorMaybeEpgTxnIdEpgTxnId Hs.Text
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SecondFactorMaybeEpgTxnId where
        nameOf _ = (Hs.fromString "SecondFactorMaybeEpgTxnId")
 
instance HsJSONPB.ToSchema SecondFactorMaybeEpgTxnId where
        declareNamedSchema _
          = do let declare_epg_txn_id = HsJSONPB.declareSchemaRef
               secondFactorMaybeEpgTxnIdEpgTxnId <- declare_epg_txn_id Proxy.Proxy
               let _ = Hs.pure SecondFactorMaybeEpgTxnIdEpgTxnId <*>
                         HsJSONPB.asProxy declare_epg_txn_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SecondFactorMaybeEpgTxnId",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("epg_txn_id",
                                                         secondFactorMaybeEpgTxnIdEpgTxnId)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data SecondFactorMaybeTxnDetailId = SecondFactorMaybeTxnDetailIdTxnDetailId Hs.Int64
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SecondFactorMaybeTxnDetailId where
        nameOf _ = (Hs.fromString "SecondFactorMaybeTxnDetailId")
 
instance HsJSONPB.ToSchema SecondFactorMaybeTxnDetailId where
        declareNamedSchema _
          = do let declare_txn_detail_id = HsJSONPB.declareSchemaRef
               secondFactorMaybeTxnDetailIdTxnDetailId <- declare_txn_detail_id
                                                            Proxy.Proxy
               let _ = Hs.pure SecondFactorMaybeTxnDetailIdTxnDetailId <*>
                         HsJSONPB.asProxy declare_txn_detail_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SecondFactorMaybeTxnDetailId",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("txn_detail_id",
                                                         secondFactorMaybeTxnDetailIdTxnDetailId)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data SecondFactorMaybeGatewayAuthReqParams = SecondFactorMaybeGatewayAuthReqParamsGatewayAuthReqParams Hs.Text
                                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SecondFactorMaybeGatewayAuthReqParams
         where
        nameOf _ = (Hs.fromString "SecondFactorMaybeGatewayAuthReqParams")
 
instance HsJSONPB.ToSchema SecondFactorMaybeGatewayAuthReqParams
         where
        declareNamedSchema _
          = do let declare_gateway_auth_req_params
                     = HsJSONPB.declareSchemaRef
               secondFactorMaybeGatewayAuthReqParamsGatewayAuthReqParams <- declare_gateway_auth_req_params
                                                                              Proxy.Proxy
               let _ = Hs.pure
                         SecondFactorMaybeGatewayAuthReqParamsGatewayAuthReqParams
                         <*> HsJSONPB.asProxy declare_gateway_auth_req_params
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SecondFactorMaybeGatewayAuthReqParams",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("gateway_auth_req_params",
                                                         secondFactorMaybeGatewayAuthReqParamsGatewayAuthReqParams)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data SecondFactorMaybeAuthenticationAccountId = SecondFactorMaybeAuthenticationAccountIdAuthenticationAccountId Hs.Text
                                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic,
                                                        Hs.NFData)
 
instance HsProtobuf.Named SecondFactorMaybeAuthenticationAccountId
         where
        nameOf _
          = (Hs.fromString "SecondFactorMaybeAuthenticationAccountId")
 
instance HsJSONPB.ToSchema SecondFactorMaybeAuthenticationAccountId
         where
        declareNamedSchema _
          = do let declare_authentication_account_id
                     = HsJSONPB.declareSchemaRef
               secondFactorMaybeAuthenticationAccountIdAuthenticationAccountId <- declare_authentication_account_id
                                                                                    Proxy.Proxy
               let _ = Hs.pure
                         SecondFactorMaybeAuthenticationAccountIdAuthenticationAccountId
                         <*> HsJSONPB.asProxy declare_authentication_account_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SecondFactorMaybeAuthenticationAccountId",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("authentication_account_id",
                                                         secondFactorMaybeAuthenticationAccountIdAuthenticationAccountId)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data SecondFactorMaybeCanAcceptResponse = SecondFactorMaybeCanAcceptResponseCanAcceptResponse Hs.Bool
                                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SecondFactorMaybeCanAcceptResponse where
        nameOf _ = (Hs.fromString "SecondFactorMaybeCanAcceptResponse")
 
instance HsJSONPB.ToSchema SecondFactorMaybeCanAcceptResponse where
        declareNamedSchema _
          = do let declare_can_accept_response = HsJSONPB.declareSchemaRef
               secondFactorMaybeCanAcceptResponseCanAcceptResponse <- declare_can_accept_response
                                                                        Proxy.Proxy
               let _ = Hs.pure SecondFactorMaybeCanAcceptResponseCanAcceptResponse
                         <*> HsJSONPB.asProxy declare_can_accept_response
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SecondFactorMaybeCanAcceptResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("can_accept_response",
                                                         secondFactorMaybeCanAcceptResponseCanAcceptResponse)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data SecondFactorMaybeChallengesAttempted = SecondFactorMaybeChallengesAttemptedChallengesAttempted Hs.Int64
                                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SecondFactorMaybeChallengesAttempted
         where
        nameOf _ = (Hs.fromString "SecondFactorMaybeChallengesAttempted")
 
instance HsJSONPB.ToSchema SecondFactorMaybeChallengesAttempted
         where
        declareNamedSchema _
          = do let declare_challenges_attempted = HsJSONPB.declareSchemaRef
               secondFactorMaybeChallengesAttemptedChallengesAttempted <- declare_challenges_attempted
                                                                            Proxy.Proxy
               let _ = Hs.pure
                         SecondFactorMaybeChallengesAttemptedChallengesAttempted
                         <*> HsJSONPB.asProxy declare_challenges_attempted
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SecondFactorMaybeChallengesAttempted",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("challenges_attempted",
                                                         secondFactorMaybeChallengesAttemptedChallengesAttempted)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data SecondFactorMaybeResponseAttempted = SecondFactorMaybeResponseAttemptedResponseAttempted Hs.Int64
                                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SecondFactorMaybeResponseAttempted where
        nameOf _ = (Hs.fromString "SecondFactorMaybeResponseAttempted")
 
instance HsJSONPB.ToSchema SecondFactorMaybeResponseAttempted where
        declareNamedSchema _
          = do let declare_response_attempted = HsJSONPB.declareSchemaRef
               secondFactorMaybeResponseAttemptedResponseAttempted <- declare_response_attempted
                                                                        Proxy.Proxy
               let _ = Hs.pure SecondFactorMaybeResponseAttemptedResponseAttempted
                         <*> HsJSONPB.asProxy declare_response_attempted
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SecondFactorMaybeResponseAttempted",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("response_attempted",
                                                         secondFactorMaybeResponseAttemptedResponseAttempted)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data SecondFactorEventType = SecondFactorEventTypeNO_SECOND_FACTOR_EVENT_TYPE
                           | SecondFactorEventTypeSECOND_FACTOR_EVENT_CREATE
                           | SecondFactorEventTypeSECOND_FACTOR_EVENT_UPDATE
                           deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SecondFactorEventType where
        nameOf _ = (Hs.fromString "SecondFactorEventType")
 
instance HsProtobuf.HasDefault SecondFactorEventType
 
instance Hs.Bounded SecondFactorEventType where
        minBound = SecondFactorEventTypeNO_SECOND_FACTOR_EVENT_TYPE
        maxBound = SecondFactorEventTypeSECOND_FACTOR_EVENT_UPDATE
 
instance Hs.Ord SecondFactorEventType where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum SecondFactorEventType where
        toProtoEnumMay 0
          = Hs.Just SecondFactorEventTypeNO_SECOND_FACTOR_EVENT_TYPE
        toProtoEnumMay 1
          = Hs.Just SecondFactorEventTypeSECOND_FACTOR_EVENT_CREATE
        toProtoEnumMay 2
          = Hs.Just SecondFactorEventTypeSECOND_FACTOR_EVENT_UPDATE
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (SecondFactorEventTypeNO_SECOND_FACTOR_EVENT_TYPE)
          = 0
        fromProtoEnum (SecondFactorEventTypeSECOND_FACTOR_EVENT_CREATE) = 1
        fromProtoEnum (SecondFactorEventTypeSECOND_FACTOR_EVENT_UPDATE) = 2
 
instance HsJSONPB.ToJSONPB SecondFactorEventType where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB SecondFactorEventType where
        parseJSONPB (HsJSONPB.String "NO_SECOND_FACTOR_EVENT_TYPE")
          = Hs.pure SecondFactorEventTypeNO_SECOND_FACTOR_EVENT_TYPE
        parseJSONPB (HsJSONPB.String "SECOND_FACTOR_EVENT_CREATE")
          = Hs.pure SecondFactorEventTypeSECOND_FACTOR_EVENT_CREATE
        parseJSONPB (HsJSONPB.String "SECOND_FACTOR_EVENT_UPDATE")
          = Hs.pure SecondFactorEventTypeSECOND_FACTOR_EVENT_UPDATE
        parseJSONPB v = (HsJSONPB.typeMismatch "SecondFactorEventType" v)
 
instance HsJSONPB.ToJSON SecondFactorEventType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SecondFactorEventType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite SecondFactorEventType