{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Euler.Proto.Event.RiskManagementAccount where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data RiskManagementAccount = RiskManagementAccount{riskManagementAccountId
                                                   :: Hs.Int64,
                                                   riskManagementAccountVersion :: Hs.Int64,
                                                   riskManagementAccountAccountDetailsJson ::
                                                   Hs.Text,
                                                   riskManagementAccountMerchantAccountId ::
                                                   Hs.Int64,
                                                   riskManagementAccountProvider :: Hs.Text,
                                                   riskManagementAccountMaybeDateCreated ::
                                                   Hs.Maybe RiskManagementAccountMaybeDateCreated,
                                                   riskManagementAccountMaybeLastUpdated ::
                                                   Hs.Maybe RiskManagementAccountMaybeLastUpdated,
                                                   riskManagementAccountMaybeRiskDsl ::
                                                   Hs.Maybe RiskManagementAccountMaybeRiskDsl,
                                                   riskManagementAccountRiskManagementAccountEventType
                                                   ::
                                                   HsProtobuf.Enumerated
                                                     Euler.Proto.Event.RiskManagementAccount.RiskManagementAccountEventType}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RiskManagementAccount where
        nameOf _ = (Hs.fromString "RiskManagementAccount")
 
instance HsProtobuf.HasDefault RiskManagementAccount
 
instance HsProtobuf.Message RiskManagementAccount where
        encodeMessage _
          RiskManagementAccount{riskManagementAccountId =
                                  riskManagementAccountId,
                                riskManagementAccountVersion = riskManagementAccountVersion,
                                riskManagementAccountAccountDetailsJson =
                                  riskManagementAccountAccountDetailsJson,
                                riskManagementAccountMerchantAccountId =
                                  riskManagementAccountMerchantAccountId,
                                riskManagementAccountProvider = riskManagementAccountProvider,
                                riskManagementAccountMaybeDateCreated =
                                  riskManagementAccountMaybeDateCreated,
                                riskManagementAccountMaybeLastUpdated =
                                  riskManagementAccountMaybeLastUpdated,
                                riskManagementAccountMaybeRiskDsl =
                                  riskManagementAccountMaybeRiskDsl,
                                riskManagementAccountRiskManagementAccountEventType =
                                  riskManagementAccountRiskManagementAccountEventType}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   riskManagementAccountId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   riskManagementAccountVersion),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   riskManagementAccountAccountDetailsJson),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   riskManagementAccountMerchantAccountId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   riskManagementAccountProvider),
                case riskManagementAccountMaybeDateCreated of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             RiskManagementAccountMaybeDateCreatedDateCreated y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                                     (HsProtobuf.ForceEmit y)),
                case riskManagementAccountMaybeLastUpdated of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             RiskManagementAccountMaybeLastUpdatedLastUpdated y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                                     (HsProtobuf.ForceEmit y)),
                case riskManagementAccountMaybeRiskDsl of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             RiskManagementAccountMaybeRiskDslRiskDsl y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 9)
                                     (HsProtobuf.ForceEmit y)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   riskManagementAccountRiskManagementAccountEventType)])
        decodeMessage _
          = (Hs.pure RiskManagementAccount) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 7),
                   (Hs.pure
                      (Hs.Just Hs.. RiskManagementAccountMaybeDateCreatedDateCreated))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 8),
                   (Hs.pure
                      (Hs.Just Hs.. RiskManagementAccountMaybeLastUpdatedLastUpdated))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 9),
                   (Hs.pure (Hs.Just Hs.. RiskManagementAccountMaybeRiskDslRiskDsl))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 6))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "version")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "account_details_json")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "merchant_account_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "provider")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Single "RiskManagementAccountEventType")))
                (HsProtobuf.Single "risk_management_account_event_type")
                []
                "")]
 
instance HsJSONPB.ToJSONPB RiskManagementAccount where
        toJSONPB (RiskManagementAccount f1 f2 f3 f4 f5 f7 f8 f9 f6)
          = (HsJSONPB.object
               ["id" .= f1, "version" .= f2, "account_details_json" .= f3,
                "merchant_account_id" .= f4, "provider" .= f5,
                (let encodeMaybe_date_created
                       = (case f7 of
                              Hs.Just (RiskManagementAccountMaybeDateCreatedDateCreated f7)
                                -> (HsJSONPB.pair "date_created" f7)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_date_created" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_date_created] options))
                         options
                       else encodeMaybe_date_created options),
                (let encodeMaybe_last_updated
                       = (case f8 of
                              Hs.Just (RiskManagementAccountMaybeLastUpdatedLastUpdated f8)
                                -> (HsJSONPB.pair "last_updated" f8)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_last_updated" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_last_updated] options))
                         options
                       else encodeMaybe_last_updated options),
                (let encodeMaybe_risk_dsl
                       = (case f9 of
                              Hs.Just (RiskManagementAccountMaybeRiskDslRiskDsl f9)
                                -> (HsJSONPB.pair "risk_dsl" f9)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_risk_dsl" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_risk_dsl] options))
                         options
                       else encodeMaybe_risk_dsl options),
                "risk_management_account_event_type" .= f6])
        toEncodingPB (RiskManagementAccount f1 f2 f3 f4 f5 f7 f8 f9 f6)
          = (HsJSONPB.pairs
               ["id" .= f1, "version" .= f2, "account_details_json" .= f3,
                "merchant_account_id" .= f4, "provider" .= f5,
                (let encodeMaybe_date_created
                       = (case f7 of
                              Hs.Just (RiskManagementAccountMaybeDateCreatedDateCreated f7)
                                -> (HsJSONPB.pair "date_created" f7)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_date_created" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_date_created] options))
                         options
                       else encodeMaybe_date_created options),
                (let encodeMaybe_last_updated
                       = (case f8 of
                              Hs.Just (RiskManagementAccountMaybeLastUpdatedLastUpdated f8)
                                -> (HsJSONPB.pair "last_updated" f8)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_last_updated" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_last_updated] options))
                         options
                       else encodeMaybe_last_updated options),
                (let encodeMaybe_risk_dsl
                       = (case f9 of
                              Hs.Just (RiskManagementAccountMaybeRiskDslRiskDsl f9)
                                -> (HsJSONPB.pair "risk_dsl" f9)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_risk_dsl" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_risk_dsl] options))
                         options
                       else encodeMaybe_risk_dsl options),
                "risk_management_account_event_type" .= f6])
 
instance HsJSONPB.FromJSONPB RiskManagementAccount where
        parseJSONPB
          = (HsJSONPB.withObject "RiskManagementAccount"
               (\ obj ->
                  (Hs.pure RiskManagementAccount) <*> obj .: "id" <*>
                    obj .: "version"
                    <*> obj .: "account_details_json"
                    <*> obj .: "merchant_account_id"
                    <*> obj .: "provider"
                    <*>
                    (let parseMaybe_date_created parseObj
                           = Hs.msum
                               [Hs.Just Hs.. RiskManagementAccountMaybeDateCreatedDateCreated <$>
                                  (HsJSONPB.parseField parseObj "date_created"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_date_created") Hs.>>=
                          (HsJSONPB.withObject "maybe_date_created" parseMaybe_date_created))
                         <|> (parseMaybe_date_created obj))
                    <*>
                    (let parseMaybe_last_updated parseObj
                           = Hs.msum
                               [Hs.Just Hs.. RiskManagementAccountMaybeLastUpdatedLastUpdated <$>
                                  (HsJSONPB.parseField parseObj "last_updated"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_last_updated") Hs.>>=
                          (HsJSONPB.withObject "maybe_last_updated" parseMaybe_last_updated))
                         <|> (parseMaybe_last_updated obj))
                    <*>
                    (let parseMaybe_risk_dsl parseObj
                           = Hs.msum
                               [Hs.Just Hs.. RiskManagementAccountMaybeRiskDslRiskDsl <$>
                                  (HsJSONPB.parseField parseObj "risk_dsl"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_risk_dsl") Hs.>>=
                          (HsJSONPB.withObject "maybe_risk_dsl" parseMaybe_risk_dsl))
                         <|> (parseMaybe_risk_dsl obj))
                    <*> obj .: "risk_management_account_event_type"))
 
instance HsJSONPB.ToJSON RiskManagementAccount where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RiskManagementAccount where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema RiskManagementAccount where
        declareNamedSchema _
          = do let declare_id = HsJSONPB.declareSchemaRef
               riskManagementAccountId <- declare_id Proxy.Proxy
               let declare_version = HsJSONPB.declareSchemaRef
               riskManagementAccountVersion <- declare_version Proxy.Proxy
               let declare_account_details_json = HsJSONPB.declareSchemaRef
               riskManagementAccountAccountDetailsJson <- declare_account_details_json
                                                            Proxy.Proxy
               let declare_merchant_account_id = HsJSONPB.declareSchemaRef
               riskManagementAccountMerchantAccountId <- declare_merchant_account_id
                                                           Proxy.Proxy
               let declare_provider = HsJSONPB.declareSchemaRef
               riskManagementAccountProvider <- declare_provider Proxy.Proxy
               let declare_maybe_date_created = HsJSONPB.declareSchemaRef
               riskManagementAccountMaybeDateCreated <- declare_maybe_date_created
                                                          Proxy.Proxy
               let declare_maybe_last_updated = HsJSONPB.declareSchemaRef
               riskManagementAccountMaybeLastUpdated <- declare_maybe_last_updated
                                                          Proxy.Proxy
               let declare_maybe_risk_dsl = HsJSONPB.declareSchemaRef
               riskManagementAccountMaybeRiskDsl <- declare_maybe_risk_dsl
                                                      Proxy.Proxy
               let declare_risk_management_account_event_type
                     = HsJSONPB.declareSchemaRef
               riskManagementAccountRiskManagementAccountEventType <- declare_risk_management_account_event_type
                                                                        Proxy.Proxy
               let _ = Hs.pure RiskManagementAccount <*>
                         HsJSONPB.asProxy declare_id
                         <*> HsJSONPB.asProxy declare_version
                         <*> HsJSONPB.asProxy declare_account_details_json
                         <*> HsJSONPB.asProxy declare_merchant_account_id
                         <*> HsJSONPB.asProxy declare_provider
                         <*> HsJSONPB.asProxy declare_maybe_date_created
                         <*> HsJSONPB.asProxy declare_maybe_last_updated
                         <*> HsJSONPB.asProxy declare_maybe_risk_dsl
                         <*> HsJSONPB.asProxy declare_risk_management_account_event_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RiskManagementAccount",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("id", riskManagementAccountId),
                                                        ("version", riskManagementAccountVersion),
                                                        ("account_details_json",
                                                         riskManagementAccountAccountDetailsJson),
                                                        ("merchant_account_id",
                                                         riskManagementAccountMerchantAccountId),
                                                        ("provider", riskManagementAccountProvider),
                                                        ("maybe_date_created",
                                                         riskManagementAccountMaybeDateCreated),
                                                        ("maybe_last_updated",
                                                         riskManagementAccountMaybeLastUpdated),
                                                        ("maybe_risk_dsl",
                                                         riskManagementAccountMaybeRiskDsl),
                                                        ("risk_management_account_event_type",
                                                         riskManagementAccountRiskManagementAccountEventType)]}})
 
data RiskManagementAccountMaybeDateCreated = RiskManagementAccountMaybeDateCreatedDateCreated Hs.Int64
                                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RiskManagementAccountMaybeDateCreated
         where
        nameOf _ = (Hs.fromString "RiskManagementAccountMaybeDateCreated")
 
instance HsJSONPB.ToSchema RiskManagementAccountMaybeDateCreated
         where
        declareNamedSchema _
          = do let declare_date_created = HsJSONPB.declareSchemaRef
               riskManagementAccountMaybeDateCreatedDateCreated <- declare_date_created
                                                                     Proxy.Proxy
               let _ = Hs.pure RiskManagementAccountMaybeDateCreatedDateCreated
                         <*> HsJSONPB.asProxy declare_date_created
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RiskManagementAccountMaybeDateCreated",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("date_created",
                                                         riskManagementAccountMaybeDateCreatedDateCreated)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data RiskManagementAccountMaybeLastUpdated = RiskManagementAccountMaybeLastUpdatedLastUpdated Hs.Int64
                                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RiskManagementAccountMaybeLastUpdated
         where
        nameOf _ = (Hs.fromString "RiskManagementAccountMaybeLastUpdated")
 
instance HsJSONPB.ToSchema RiskManagementAccountMaybeLastUpdated
         where
        declareNamedSchema _
          = do let declare_last_updated = HsJSONPB.declareSchemaRef
               riskManagementAccountMaybeLastUpdatedLastUpdated <- declare_last_updated
                                                                     Proxy.Proxy
               let _ = Hs.pure RiskManagementAccountMaybeLastUpdatedLastUpdated
                         <*> HsJSONPB.asProxy declare_last_updated
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RiskManagementAccountMaybeLastUpdated",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("last_updated",
                                                         riskManagementAccountMaybeLastUpdatedLastUpdated)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data RiskManagementAccountMaybeRiskDsl = RiskManagementAccountMaybeRiskDslRiskDsl Hs.Text
                                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RiskManagementAccountMaybeRiskDsl where
        nameOf _ = (Hs.fromString "RiskManagementAccountMaybeRiskDsl")
 
instance HsJSONPB.ToSchema RiskManagementAccountMaybeRiskDsl where
        declareNamedSchema _
          = do let declare_risk_dsl = HsJSONPB.declareSchemaRef
               riskManagementAccountMaybeRiskDslRiskDsl <- declare_risk_dsl
                                                             Proxy.Proxy
               let _ = Hs.pure RiskManagementAccountMaybeRiskDslRiskDsl <*>
                         HsJSONPB.asProxy declare_risk_dsl
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "RiskManagementAccountMaybeRiskDsl",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("risk_dsl",
                                                         riskManagementAccountMaybeRiskDslRiskDsl)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data RiskManagementAccountEventType = RiskManagementAccountEventTypeNO_RISK_MANAGEMENT_ACCOUNT_EVENT_TYPE
                                    | RiskManagementAccountEventTypeRISK_MANAGEMENT_ACCOUNT_EVENT_CREATE
                                    | RiskManagementAccountEventTypeRISK_MANAGEMENT_ACCOUNT_EVENT_UPDATE
                                    deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named RiskManagementAccountEventType where
        nameOf _ = (Hs.fromString "RiskManagementAccountEventType")
 
instance HsProtobuf.HasDefault RiskManagementAccountEventType
 
instance Hs.Bounded RiskManagementAccountEventType where
        minBound
          = RiskManagementAccountEventTypeNO_RISK_MANAGEMENT_ACCOUNT_EVENT_TYPE
        maxBound
          = RiskManagementAccountEventTypeRISK_MANAGEMENT_ACCOUNT_EVENT_UPDATE
 
instance Hs.Ord RiskManagementAccountEventType where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum RiskManagementAccountEventType where
        toProtoEnumMay 0
          = Hs.Just
              RiskManagementAccountEventTypeNO_RISK_MANAGEMENT_ACCOUNT_EVENT_TYPE
        toProtoEnumMay 1
          = Hs.Just
              RiskManagementAccountEventTypeRISK_MANAGEMENT_ACCOUNT_EVENT_CREATE
        toProtoEnumMay 2
          = Hs.Just
              RiskManagementAccountEventTypeRISK_MANAGEMENT_ACCOUNT_EVENT_UPDATE
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum
          (RiskManagementAccountEventTypeNO_RISK_MANAGEMENT_ACCOUNT_EVENT_TYPE)
          = 0
        fromProtoEnum
          (RiskManagementAccountEventTypeRISK_MANAGEMENT_ACCOUNT_EVENT_CREATE)
          = 1
        fromProtoEnum
          (RiskManagementAccountEventTypeRISK_MANAGEMENT_ACCOUNT_EVENT_UPDATE)
          = 2
 
instance HsJSONPB.ToJSONPB RiskManagementAccountEventType where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB RiskManagementAccountEventType where
        parseJSONPB
          (HsJSONPB.String "NO_RISK_MANAGEMENT_ACCOUNT_EVENT_TYPE")
          = Hs.pure
              RiskManagementAccountEventTypeNO_RISK_MANAGEMENT_ACCOUNT_EVENT_TYPE
        parseJSONPB
          (HsJSONPB.String "RISK_MANAGEMENT_ACCOUNT_EVENT_CREATE")
          = Hs.pure
              RiskManagementAccountEventTypeRISK_MANAGEMENT_ACCOUNT_EVENT_CREATE
        parseJSONPB
          (HsJSONPB.String "RISK_MANAGEMENT_ACCOUNT_EVENT_UPDATE")
          = Hs.pure
              RiskManagementAccountEventTypeRISK_MANAGEMENT_ACCOUNT_EVENT_UPDATE
        parseJSONPB v
          = (HsJSONPB.typeMismatch "RiskManagementAccountEventType" v)
 
instance HsJSONPB.ToJSON RiskManagementAccountEventType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON RiskManagementAccountEventType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite RiskManagementAccountEventType