{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Euler.Proto.Event.TxnCardInfo where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data TxnCardInfo = TxnCardInfo{txnCardInfoId :: Hs.Int64,
                               txnCardInfoTxnId :: Hs.Text,
                               txnCardInfoMaybeCardIsin :: Hs.Maybe TxnCardInfoMaybeCardIsin,
                               txnCardInfoMaybeCardIssuerBankName ::
                               Hs.Maybe TxnCardInfoMaybeCardIssuerBankName,
                               txnCardInfoMaybeCardExpYear ::
                               Hs.Maybe TxnCardInfoMaybeCardExpYear,
                               txnCardInfoMaybeCardExpMonth ::
                               Hs.Maybe TxnCardInfoMaybeCardExpMonth,
                               txnCardInfoMaybeCardSwitchProvider ::
                               Hs.Maybe TxnCardInfoMaybeCardSwitchProvider,
                               txnCardInfoMaybeCardType :: Hs.Maybe TxnCardInfoMaybeCardType,
                               txnCardInfoMaybeCardLastFourDigits ::
                               Hs.Maybe TxnCardInfoMaybeCardLastFourDigits,
                               txnCardInfoMaybeNameOnCard :: Hs.Maybe TxnCardInfoMaybeNameOnCard,
                               txnCardInfoMaybeCardFingerprint ::
                               Hs.Maybe TxnCardInfoMaybeCardFingerprint,
                               txnCardInfoMaybeCardReferenceId ::
                               Hs.Maybe TxnCardInfoMaybeCardReferenceId,
                               txnCardInfoMaybeTxnDetailId ::
                               Hs.Maybe TxnCardInfoMaybeTxnDetailId,
                               txnCardInfoMaybeDateCreated ::
                               Hs.Maybe TxnCardInfoMaybeDateCreated,
                               txnCardInfoMaybePaymentMethodType ::
                               Hs.Maybe TxnCardInfoMaybePaymentMethodType,
                               txnCardInfoMaybePaymentMethod ::
                               Hs.Maybe TxnCardInfoMaybePaymentMethod,
                               txnCardInfoMaybeCardGlobalFingerprint ::
                               Hs.Maybe TxnCardInfoMaybeCardGlobalFingerprint,
                               txnCardInfoMaybePaymentSource ::
                               Hs.Maybe TxnCardInfoMaybePaymentSource,
                               txnCardInfoMaybeAuthType :: Hs.Maybe TxnCardInfoMaybeAuthType,
                               txnCardInfoTxnCardInfoEventType ::
                               HsProtobuf.Enumerated
                                 Euler.Proto.Event.TxnCardInfo.TxnCardInfoEventType}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfo where
        nameOf _ = (Hs.fromString "TxnCardInfo")
 
instance HsProtobuf.HasDefault TxnCardInfo
 
instance HsProtobuf.Message TxnCardInfo where
        encodeMessage _
          TxnCardInfo{txnCardInfoId = txnCardInfoId,
                      txnCardInfoTxnId = txnCardInfoTxnId,
                      txnCardInfoMaybeCardIsin = txnCardInfoMaybeCardIsin,
                      txnCardInfoMaybeCardIssuerBankName =
                        txnCardInfoMaybeCardIssuerBankName,
                      txnCardInfoMaybeCardExpYear = txnCardInfoMaybeCardExpYear,
                      txnCardInfoMaybeCardExpMonth = txnCardInfoMaybeCardExpMonth,
                      txnCardInfoMaybeCardSwitchProvider =
                        txnCardInfoMaybeCardSwitchProvider,
                      txnCardInfoMaybeCardType = txnCardInfoMaybeCardType,
                      txnCardInfoMaybeCardLastFourDigits =
                        txnCardInfoMaybeCardLastFourDigits,
                      txnCardInfoMaybeNameOnCard = txnCardInfoMaybeNameOnCard,
                      txnCardInfoMaybeCardFingerprint = txnCardInfoMaybeCardFingerprint,
                      txnCardInfoMaybeCardReferenceId = txnCardInfoMaybeCardReferenceId,
                      txnCardInfoMaybeTxnDetailId = txnCardInfoMaybeTxnDetailId,
                      txnCardInfoMaybeDateCreated = txnCardInfoMaybeDateCreated,
                      txnCardInfoMaybePaymentMethodType =
                        txnCardInfoMaybePaymentMethodType,
                      txnCardInfoMaybePaymentMethod = txnCardInfoMaybePaymentMethod,
                      txnCardInfoMaybeCardGlobalFingerprint =
                        txnCardInfoMaybeCardGlobalFingerprint,
                      txnCardInfoMaybePaymentSource = txnCardInfoMaybePaymentSource,
                      txnCardInfoMaybeAuthType = txnCardInfoMaybeAuthType,
                      txnCardInfoTxnCardInfoEventType = txnCardInfoTxnCardInfoEventType}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   txnCardInfoId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   txnCardInfoTxnId),
                case txnCardInfoMaybeCardIsin of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeCardIsinCardIsin y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybeCardIssuerBankName of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeCardIssuerBankNameCardIssuerBankName y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybeCardExpYear of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeCardExpYearCardExpYear y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybeCardExpMonth of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeCardExpMonthCardExpMonth y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybeCardSwitchProvider of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeCardSwitchProviderCardSwitchProvider y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybeCardType of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeCardTypeCardType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 9)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybeCardLastFourDigits of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeCardLastFourDigitsCardLastFourDigits y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 10)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybeNameOnCard of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeNameOnCardNameOnCard y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 11)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybeCardFingerprint of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeCardFingerprintCardFingerprint y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 12)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybeCardReferenceId of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeCardReferenceIdCardReferenceId y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 13)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybeTxnDetailId of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeTxnDetailIdTxnDetailId y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 14)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybeDateCreated of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeDateCreatedDateCreated y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 15)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybePaymentMethodType of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybePaymentMethodTypePaymentMethodType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 16)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybePaymentMethod of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybePaymentMethodPaymentMethod y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 17)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybeCardGlobalFingerprint of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeCardGlobalFingerprintCardGlobalFingerprint y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 18)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybePaymentSource of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybePaymentSourcePaymentSource y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 19)
                                     (HsProtobuf.ForceEmit y)),
                case txnCardInfoMaybeAuthType of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TxnCardInfoMaybeAuthTypeAuthType y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 20)
                                     (HsProtobuf.ForceEmit y)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   txnCardInfoTxnCardInfoEventType)])
        decodeMessage _
          = (Hs.pure TxnCardInfo) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.Just Hs.. TxnCardInfoMaybeCardIsinCardIsin)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 5),
                   (Hs.pure
                      (Hs.Just Hs..
                         TxnCardInfoMaybeCardIssuerBankNameCardIssuerBankName))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 6),
                   (Hs.pure (Hs.Just Hs.. TxnCardInfoMaybeCardExpYearCardExpYear)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 7),
                   (Hs.pure (Hs.Just Hs.. TxnCardInfoMaybeCardExpMonthCardExpMonth))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 8),
                   (Hs.pure
                      (Hs.Just Hs..
                         TxnCardInfoMaybeCardSwitchProviderCardSwitchProvider))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 9),
                   (Hs.pure (Hs.Just Hs.. TxnCardInfoMaybeCardTypeCardType)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 10),
                   (Hs.pure
                      (Hs.Just Hs..
                         TxnCardInfoMaybeCardLastFourDigitsCardLastFourDigits))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 11),
                   (Hs.pure (Hs.Just Hs.. TxnCardInfoMaybeNameOnCardNameOnCard)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 12),
                   (Hs.pure
                      (Hs.Just Hs.. TxnCardInfoMaybeCardFingerprintCardFingerprint))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 13),
                   (Hs.pure
                      (Hs.Just Hs.. TxnCardInfoMaybeCardReferenceIdCardReferenceId))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 14),
                   (Hs.pure (Hs.Just Hs.. TxnCardInfoMaybeTxnDetailIdTxnDetailId)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 15),
                   (Hs.pure (Hs.Just Hs.. TxnCardInfoMaybeDateCreatedDateCreated)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 16),
                   (Hs.pure
                      (Hs.Just Hs.. TxnCardInfoMaybePaymentMethodTypePaymentMethodType))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 17),
                   (Hs.pure (Hs.Just Hs.. TxnCardInfoMaybePaymentMethodPaymentMethod))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 18),
                   (Hs.pure
                      (Hs.Just Hs..
                         TxnCardInfoMaybeCardGlobalFingerprintCardGlobalFingerprint))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 19),
                   (Hs.pure (Hs.Just Hs.. TxnCardInfoMaybePaymentSourcePaymentSource))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 20),
                   (Hs.pure (Hs.Just Hs.. TxnCardInfoMaybeAuthTypeAuthType)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "txn_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "TxnCardInfoEventType")))
                (HsProtobuf.Single "txn_card_info_event_type")
                []
                "")]
 
instance HsJSONPB.ToJSONPB TxnCardInfo where
        toJSONPB
          (TxnCardInfo f1 f2 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15 f16
             f17 f18 f19 f20 f3)
          = (HsJSONPB.object
               ["id" .= f1, "txn_id" .= f2,
                (let encodeMaybe_card_isin
                       = (case f4 of
                              Hs.Just (TxnCardInfoMaybeCardIsinCardIsin f4)
                                -> (HsJSONPB.pair "card_isin" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_isin" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_isin] options))
                         options
                       else encodeMaybe_card_isin options),
                (let encodeMaybe_card_issuer_bank_name
                       = (case f5 of
                              Hs.Just (TxnCardInfoMaybeCardIssuerBankNameCardIssuerBankName f5)
                                -> (HsJSONPB.pair "card_issuer_bank_name" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_issuer_bank_name" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_issuer_bank_name]
                             options))
                         options
                       else encodeMaybe_card_issuer_bank_name options),
                (let encodeMaybe_card_exp_year
                       = (case f6 of
                              Hs.Just (TxnCardInfoMaybeCardExpYearCardExpYear f6)
                                -> (HsJSONPB.pair "card_exp_year" f6)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_exp_year" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_exp_year] options))
                         options
                       else encodeMaybe_card_exp_year options),
                (let encodeMaybe_card_exp_month
                       = (case f7 of
                              Hs.Just (TxnCardInfoMaybeCardExpMonthCardExpMonth f7)
                                -> (HsJSONPB.pair "card_exp_month" f7)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_exp_month" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_exp_month] options))
                         options
                       else encodeMaybe_card_exp_month options),
                (let encodeMaybe_card_switch_provider
                       = (case f8 of
                              Hs.Just (TxnCardInfoMaybeCardSwitchProviderCardSwitchProvider f8)
                                -> (HsJSONPB.pair "card_switch_provider" f8)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_switch_provider" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_switch_provider] options))
                         options
                       else encodeMaybe_card_switch_provider options),
                (let encodeMaybe_card_type
                       = (case f9 of
                              Hs.Just (TxnCardInfoMaybeCardTypeCardType f9)
                                -> (HsJSONPB.pair "card_type" f9)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_type" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_type] options))
                         options
                       else encodeMaybe_card_type options),
                (let encodeMaybe_card_last_four_digits
                       = (case f10 of
                              Hs.Just (TxnCardInfoMaybeCardLastFourDigitsCardLastFourDigits f10)
                                -> (HsJSONPB.pair "card_last_four_digits" f10)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_last_four_digits" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_last_four_digits]
                             options))
                         options
                       else encodeMaybe_card_last_four_digits options),
                (let encodeMaybe_name_on_card
                       = (case f11 of
                              Hs.Just (TxnCardInfoMaybeNameOnCardNameOnCard f11)
                                -> (HsJSONPB.pair "name_on_card" f11)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_name_on_card" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_name_on_card] options))
                         options
                       else encodeMaybe_name_on_card options),
                (let encodeMaybe_card_fingerprint
                       = (case f12 of
                              Hs.Just (TxnCardInfoMaybeCardFingerprintCardFingerprint f12)
                                -> (HsJSONPB.pair "card_fingerprint" f12)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_fingerprint" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_fingerprint] options))
                         options
                       else encodeMaybe_card_fingerprint options),
                (let encodeMaybe_card_reference_id
                       = (case f13 of
                              Hs.Just (TxnCardInfoMaybeCardReferenceIdCardReferenceId f13)
                                -> (HsJSONPB.pair "card_reference_id" f13)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_reference_id" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_reference_id] options))
                         options
                       else encodeMaybe_card_reference_id options),
                (let encodeMaybe_txn_detail_id
                       = (case f14 of
                              Hs.Just (TxnCardInfoMaybeTxnDetailIdTxnDetailId f14)
                                -> (HsJSONPB.pair "txn_detail_id" f14)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_txn_detail_id" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_txn_detail_id] options))
                         options
                       else encodeMaybe_txn_detail_id options),
                (let encodeMaybe_date_created
                       = (case f15 of
                              Hs.Just (TxnCardInfoMaybeDateCreatedDateCreated f15)
                                -> (HsJSONPB.pair "date_created" f15)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_date_created" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_date_created] options))
                         options
                       else encodeMaybe_date_created options),
                (let encodeMaybe_payment_method_type
                       = (case f16 of
                              Hs.Just (TxnCardInfoMaybePaymentMethodTypePaymentMethodType f16)
                                -> (HsJSONPB.pair "payment_method_type" f16)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_payment_method_type" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_payment_method_type] options))
                         options
                       else encodeMaybe_payment_method_type options),
                (let encodeMaybe_payment_method
                       = (case f17 of
                              Hs.Just (TxnCardInfoMaybePaymentMethodPaymentMethod f17)
                                -> (HsJSONPB.pair "payment_method" f17)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_payment_method" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_payment_method] options))
                         options
                       else encodeMaybe_payment_method options),
                (let encodeMaybe_card_global_fingerprint
                       = (case f18 of
                              Hs.Just
                                (TxnCardInfoMaybeCardGlobalFingerprintCardGlobalFingerprint f18)
                                -> (HsJSONPB.pair "card_global_fingerprint" f18)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_global_fingerprint" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_card_global_fingerprint]
                             options))
                         options
                       else encodeMaybe_card_global_fingerprint options),
                (let encodeMaybe_payment_source
                       = (case f19 of
                              Hs.Just (TxnCardInfoMaybePaymentSourcePaymentSource f19)
                                -> (HsJSONPB.pair "payment_source" f19)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_payment_source" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_payment_source] options))
                         options
                       else encodeMaybe_payment_source options),
                (let encodeMaybe_auth_type
                       = (case f20 of
                              Hs.Just (TxnCardInfoMaybeAuthTypeAuthType f20)
                                -> (HsJSONPB.pair "auth_type" f20)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_auth_type" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_auth_type] options))
                         options
                       else encodeMaybe_auth_type options),
                "txn_card_info_event_type" .= f3])
        toEncodingPB
          (TxnCardInfo f1 f2 f4 f5 f6 f7 f8 f9 f10 f11 f12 f13 f14 f15 f16
             f17 f18 f19 f20 f3)
          = (HsJSONPB.pairs
               ["id" .= f1, "txn_id" .= f2,
                (let encodeMaybe_card_isin
                       = (case f4 of
                              Hs.Just (TxnCardInfoMaybeCardIsinCardIsin f4)
                                -> (HsJSONPB.pair "card_isin" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_isin" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_isin] options))
                         options
                       else encodeMaybe_card_isin options),
                (let encodeMaybe_card_issuer_bank_name
                       = (case f5 of
                              Hs.Just (TxnCardInfoMaybeCardIssuerBankNameCardIssuerBankName f5)
                                -> (HsJSONPB.pair "card_issuer_bank_name" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_issuer_bank_name" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_issuer_bank_name] options))
                         options
                       else encodeMaybe_card_issuer_bank_name options),
                (let encodeMaybe_card_exp_year
                       = (case f6 of
                              Hs.Just (TxnCardInfoMaybeCardExpYearCardExpYear f6)
                                -> (HsJSONPB.pair "card_exp_year" f6)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_exp_year" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_exp_year] options))
                         options
                       else encodeMaybe_card_exp_year options),
                (let encodeMaybe_card_exp_month
                       = (case f7 of
                              Hs.Just (TxnCardInfoMaybeCardExpMonthCardExpMonth f7)
                                -> (HsJSONPB.pair "card_exp_month" f7)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_exp_month" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_exp_month] options))
                         options
                       else encodeMaybe_card_exp_month options),
                (let encodeMaybe_card_switch_provider
                       = (case f8 of
                              Hs.Just (TxnCardInfoMaybeCardSwitchProviderCardSwitchProvider f8)
                                -> (HsJSONPB.pair "card_switch_provider" f8)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_switch_provider" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_switch_provider] options))
                         options
                       else encodeMaybe_card_switch_provider options),
                (let encodeMaybe_card_type
                       = (case f9 of
                              Hs.Just (TxnCardInfoMaybeCardTypeCardType f9)
                                -> (HsJSONPB.pair "card_type" f9)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_type" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_type] options))
                         options
                       else encodeMaybe_card_type options),
                (let encodeMaybe_card_last_four_digits
                       = (case f10 of
                              Hs.Just (TxnCardInfoMaybeCardLastFourDigitsCardLastFourDigits f10)
                                -> (HsJSONPB.pair "card_last_four_digits" f10)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_last_four_digits" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_last_four_digits] options))
                         options
                       else encodeMaybe_card_last_four_digits options),
                (let encodeMaybe_name_on_card
                       = (case f11 of
                              Hs.Just (TxnCardInfoMaybeNameOnCardNameOnCard f11)
                                -> (HsJSONPB.pair "name_on_card" f11)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_name_on_card" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_name_on_card] options))
                         options
                       else encodeMaybe_name_on_card options),
                (let encodeMaybe_card_fingerprint
                       = (case f12 of
                              Hs.Just (TxnCardInfoMaybeCardFingerprintCardFingerprint f12)
                                -> (HsJSONPB.pair "card_fingerprint" f12)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_fingerprint" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_fingerprint] options))
                         options
                       else encodeMaybe_card_fingerprint options),
                (let encodeMaybe_card_reference_id
                       = (case f13 of
                              Hs.Just (TxnCardInfoMaybeCardReferenceIdCardReferenceId f13)
                                -> (HsJSONPB.pair "card_reference_id" f13)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_reference_id" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_reference_id] options))
                         options
                       else encodeMaybe_card_reference_id options),
                (let encodeMaybe_txn_detail_id
                       = (case f14 of
                              Hs.Just (TxnCardInfoMaybeTxnDetailIdTxnDetailId f14)
                                -> (HsJSONPB.pair "txn_detail_id" f14)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_txn_detail_id" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_txn_detail_id] options))
                         options
                       else encodeMaybe_txn_detail_id options),
                (let encodeMaybe_date_created
                       = (case f15 of
                              Hs.Just (TxnCardInfoMaybeDateCreatedDateCreated f15)
                                -> (HsJSONPB.pair "date_created" f15)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_date_created" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_date_created] options))
                         options
                       else encodeMaybe_date_created options),
                (let encodeMaybe_payment_method_type
                       = (case f16 of
                              Hs.Just (TxnCardInfoMaybePaymentMethodTypePaymentMethodType f16)
                                -> (HsJSONPB.pair "payment_method_type" f16)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_payment_method_type" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_payment_method_type] options))
                         options
                       else encodeMaybe_payment_method_type options),
                (let encodeMaybe_payment_method
                       = (case f17 of
                              Hs.Just (TxnCardInfoMaybePaymentMethodPaymentMethod f17)
                                -> (HsJSONPB.pair "payment_method" f17)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_payment_method" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_payment_method] options))
                         options
                       else encodeMaybe_payment_method options),
                (let encodeMaybe_card_global_fingerprint
                       = (case f18 of
                              Hs.Just
                                (TxnCardInfoMaybeCardGlobalFingerprintCardGlobalFingerprint f18)
                                -> (HsJSONPB.pair "card_global_fingerprint" f18)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_card_global_fingerprint" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_card_global_fingerprint]
                             options))
                         options
                       else encodeMaybe_card_global_fingerprint options),
                (let encodeMaybe_payment_source
                       = (case f19 of
                              Hs.Just (TxnCardInfoMaybePaymentSourcePaymentSource f19)
                                -> (HsJSONPB.pair "payment_source" f19)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_payment_source" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_payment_source] options))
                         options
                       else encodeMaybe_payment_source options),
                (let encodeMaybe_auth_type
                       = (case f20 of
                              Hs.Just (TxnCardInfoMaybeAuthTypeAuthType f20)
                                -> (HsJSONPB.pair "auth_type" f20)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_auth_type" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_auth_type] options))
                         options
                       else encodeMaybe_auth_type options),
                "txn_card_info_event_type" .= f3])
 
instance HsJSONPB.FromJSONPB TxnCardInfo where
        parseJSONPB
          = (HsJSONPB.withObject "TxnCardInfo"
               (\ obj ->
                  (Hs.pure TxnCardInfo) <*> obj .: "id" <*> obj .: "txn_id" <*>
                    (let parseMaybe_card_isin parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybeCardIsinCardIsin <$>
                                  (HsJSONPB.parseField parseObj "card_isin"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_isin") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_isin" parseMaybe_card_isin))
                         <|> (parseMaybe_card_isin obj))
                    <*>
                    (let parseMaybe_card_issuer_bank_name parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybeCardIssuerBankNameCardIssuerBankName
                                  <$> (HsJSONPB.parseField parseObj "card_issuer_bank_name"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_issuer_bank_name") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_issuer_bank_name"
                             parseMaybe_card_issuer_bank_name))
                         <|> (parseMaybe_card_issuer_bank_name obj))
                    <*>
                    (let parseMaybe_card_exp_year parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybeCardExpYearCardExpYear <$>
                                  (HsJSONPB.parseField parseObj "card_exp_year"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_exp_year") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_exp_year"
                             parseMaybe_card_exp_year))
                         <|> (parseMaybe_card_exp_year obj))
                    <*>
                    (let parseMaybe_card_exp_month parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybeCardExpMonthCardExpMonth <$>
                                  (HsJSONPB.parseField parseObj "card_exp_month"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_exp_month") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_exp_month"
                             parseMaybe_card_exp_month))
                         <|> (parseMaybe_card_exp_month obj))
                    <*>
                    (let parseMaybe_card_switch_provider parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybeCardSwitchProviderCardSwitchProvider
                                  <$> (HsJSONPB.parseField parseObj "card_switch_provider"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_switch_provider") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_switch_provider"
                             parseMaybe_card_switch_provider))
                         <|> (parseMaybe_card_switch_provider obj))
                    <*>
                    (let parseMaybe_card_type parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybeCardTypeCardType <$>
                                  (HsJSONPB.parseField parseObj "card_type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_type") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_type" parseMaybe_card_type))
                         <|> (parseMaybe_card_type obj))
                    <*>
                    (let parseMaybe_card_last_four_digits parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybeCardLastFourDigitsCardLastFourDigits
                                  <$> (HsJSONPB.parseField parseObj "card_last_four_digits"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_last_four_digits") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_last_four_digits"
                             parseMaybe_card_last_four_digits))
                         <|> (parseMaybe_card_last_four_digits obj))
                    <*>
                    (let parseMaybe_name_on_card parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybeNameOnCardNameOnCard <$>
                                  (HsJSONPB.parseField parseObj "name_on_card"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_name_on_card") Hs.>>=
                          (HsJSONPB.withObject "maybe_name_on_card" parseMaybe_name_on_card))
                         <|> (parseMaybe_name_on_card obj))
                    <*>
                    (let parseMaybe_card_fingerprint parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybeCardFingerprintCardFingerprint <$>
                                  (HsJSONPB.parseField parseObj "card_fingerprint"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_fingerprint") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_fingerprint"
                             parseMaybe_card_fingerprint))
                         <|> (parseMaybe_card_fingerprint obj))
                    <*>
                    (let parseMaybe_card_reference_id parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybeCardReferenceIdCardReferenceId <$>
                                  (HsJSONPB.parseField parseObj "card_reference_id"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_reference_id") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_reference_id"
                             parseMaybe_card_reference_id))
                         <|> (parseMaybe_card_reference_id obj))
                    <*>
                    (let parseMaybe_txn_detail_id parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybeTxnDetailIdTxnDetailId <$>
                                  (HsJSONPB.parseField parseObj "txn_detail_id"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_txn_detail_id") Hs.>>=
                          (HsJSONPB.withObject "maybe_txn_detail_id"
                             parseMaybe_txn_detail_id))
                         <|> (parseMaybe_txn_detail_id obj))
                    <*>
                    (let parseMaybe_date_created parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybeDateCreatedDateCreated <$>
                                  (HsJSONPB.parseField parseObj "date_created"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_date_created") Hs.>>=
                          (HsJSONPB.withObject "maybe_date_created" parseMaybe_date_created))
                         <|> (parseMaybe_date_created obj))
                    <*>
                    (let parseMaybe_payment_method_type parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybePaymentMethodTypePaymentMethodType
                                  <$> (HsJSONPB.parseField parseObj "payment_method_type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_payment_method_type") Hs.>>=
                          (HsJSONPB.withObject "maybe_payment_method_type"
                             parseMaybe_payment_method_type))
                         <|> (parseMaybe_payment_method_type obj))
                    <*>
                    (let parseMaybe_payment_method parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybePaymentMethodPaymentMethod <$>
                                  (HsJSONPB.parseField parseObj "payment_method"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_payment_method") Hs.>>=
                          (HsJSONPB.withObject "maybe_payment_method"
                             parseMaybe_payment_method))
                         <|> (parseMaybe_payment_method obj))
                    <*>
                    (let parseMaybe_card_global_fingerprint parseObj
                           = Hs.msum
                               [Hs.Just Hs..
                                  TxnCardInfoMaybeCardGlobalFingerprintCardGlobalFingerprint
                                  <$> (HsJSONPB.parseField parseObj "card_global_fingerprint"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_card_global_fingerprint") Hs.>>=
                          (HsJSONPB.withObject "maybe_card_global_fingerprint"
                             parseMaybe_card_global_fingerprint))
                         <|> (parseMaybe_card_global_fingerprint obj))
                    <*>
                    (let parseMaybe_payment_source parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybePaymentSourcePaymentSource <$>
                                  (HsJSONPB.parseField parseObj "payment_source"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_payment_source") Hs.>>=
                          (HsJSONPB.withObject "maybe_payment_source"
                             parseMaybe_payment_source))
                         <|> (parseMaybe_payment_source obj))
                    <*>
                    (let parseMaybe_auth_type parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TxnCardInfoMaybeAuthTypeAuthType <$>
                                  (HsJSONPB.parseField parseObj "auth_type"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_auth_type") Hs.>>=
                          (HsJSONPB.withObject "maybe_auth_type" parseMaybe_auth_type))
                         <|> (parseMaybe_auth_type obj))
                    <*> obj .: "txn_card_info_event_type"))
 
instance HsJSONPB.ToJSON TxnCardInfo where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON TxnCardInfo where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema TxnCardInfo where
        declareNamedSchema _
          = do let declare_id = HsJSONPB.declareSchemaRef
               txnCardInfoId <- declare_id Proxy.Proxy
               let declare_txn_id = HsJSONPB.declareSchemaRef
               txnCardInfoTxnId <- declare_txn_id Proxy.Proxy
               let declare_maybe_card_isin = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardIsin <- declare_maybe_card_isin Proxy.Proxy
               let declare_maybe_card_issuer_bank_name = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardIssuerBankName <- declare_maybe_card_issuer_bank_name
                                                       Proxy.Proxy
               let declare_maybe_card_exp_year = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardExpYear <- declare_maybe_card_exp_year
                                                Proxy.Proxy
               let declare_maybe_card_exp_month = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardExpMonth <- declare_maybe_card_exp_month
                                                 Proxy.Proxy
               let declare_maybe_card_switch_provider = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardSwitchProvider <- declare_maybe_card_switch_provider
                                                       Proxy.Proxy
               let declare_maybe_card_type = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardType <- declare_maybe_card_type Proxy.Proxy
               let declare_maybe_card_last_four_digits = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardLastFourDigits <- declare_maybe_card_last_four_digits
                                                       Proxy.Proxy
               let declare_maybe_name_on_card = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeNameOnCard <- declare_maybe_name_on_card
                                               Proxy.Proxy
               let declare_maybe_card_fingerprint = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardFingerprint <- declare_maybe_card_fingerprint
                                                    Proxy.Proxy
               let declare_maybe_card_reference_id = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardReferenceId <- declare_maybe_card_reference_id
                                                    Proxy.Proxy
               let declare_maybe_txn_detail_id = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeTxnDetailId <- declare_maybe_txn_detail_id
                                                Proxy.Proxy
               let declare_maybe_date_created = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeDateCreated <- declare_maybe_date_created
                                                Proxy.Proxy
               let declare_maybe_payment_method_type = HsJSONPB.declareSchemaRef
               txnCardInfoMaybePaymentMethodType <- declare_maybe_payment_method_type
                                                      Proxy.Proxy
               let declare_maybe_payment_method = HsJSONPB.declareSchemaRef
               txnCardInfoMaybePaymentMethod <- declare_maybe_payment_method
                                                  Proxy.Proxy
               let declare_maybe_card_global_fingerprint
                     = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardGlobalFingerprint <- declare_maybe_card_global_fingerprint
                                                          Proxy.Proxy
               let declare_maybe_payment_source = HsJSONPB.declareSchemaRef
               txnCardInfoMaybePaymentSource <- declare_maybe_payment_source
                                                  Proxy.Proxy
               let declare_maybe_auth_type = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeAuthType <- declare_maybe_auth_type Proxy.Proxy
               let declare_txn_card_info_event_type = HsJSONPB.declareSchemaRef
               txnCardInfoTxnCardInfoEventType <- declare_txn_card_info_event_type
                                                    Proxy.Proxy
               let _ = Hs.pure TxnCardInfo <*> HsJSONPB.asProxy declare_id <*>
                         HsJSONPB.asProxy declare_txn_id
                         <*> HsJSONPB.asProxy declare_maybe_card_isin
                         <*> HsJSONPB.asProxy declare_maybe_card_issuer_bank_name
                         <*> HsJSONPB.asProxy declare_maybe_card_exp_year
                         <*> HsJSONPB.asProxy declare_maybe_card_exp_month
                         <*> HsJSONPB.asProxy declare_maybe_card_switch_provider
                         <*> HsJSONPB.asProxy declare_maybe_card_type
                         <*> HsJSONPB.asProxy declare_maybe_card_last_four_digits
                         <*> HsJSONPB.asProxy declare_maybe_name_on_card
                         <*> HsJSONPB.asProxy declare_maybe_card_fingerprint
                         <*> HsJSONPB.asProxy declare_maybe_card_reference_id
                         <*> HsJSONPB.asProxy declare_maybe_txn_detail_id
                         <*> HsJSONPB.asProxy declare_maybe_date_created
                         <*> HsJSONPB.asProxy declare_maybe_payment_method_type
                         <*> HsJSONPB.asProxy declare_maybe_payment_method
                         <*> HsJSONPB.asProxy declare_maybe_card_global_fingerprint
                         <*> HsJSONPB.asProxy declare_maybe_payment_source
                         <*> HsJSONPB.asProxy declare_maybe_auth_type
                         <*> HsJSONPB.asProxy declare_txn_card_info_event_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfo",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("id", txnCardInfoId),
                                                        ("txn_id", txnCardInfoTxnId),
                                                        ("maybe_card_isin",
                                                         txnCardInfoMaybeCardIsin),
                                                        ("maybe_card_issuer_bank_name",
                                                         txnCardInfoMaybeCardIssuerBankName),
                                                        ("maybe_card_exp_year",
                                                         txnCardInfoMaybeCardExpYear),
                                                        ("maybe_card_exp_month",
                                                         txnCardInfoMaybeCardExpMonth),
                                                        ("maybe_card_switch_provider",
                                                         txnCardInfoMaybeCardSwitchProvider),
                                                        ("maybe_card_type",
                                                         txnCardInfoMaybeCardType),
                                                        ("maybe_card_last_four_digits",
                                                         txnCardInfoMaybeCardLastFourDigits),
                                                        ("maybe_name_on_card",
                                                         txnCardInfoMaybeNameOnCard),
                                                        ("maybe_card_fingerprint",
                                                         txnCardInfoMaybeCardFingerprint),
                                                        ("maybe_card_reference_id",
                                                         txnCardInfoMaybeCardReferenceId),
                                                        ("maybe_txn_detail_id",
                                                         txnCardInfoMaybeTxnDetailId),
                                                        ("maybe_date_created",
                                                         txnCardInfoMaybeDateCreated),
                                                        ("maybe_payment_method_type",
                                                         txnCardInfoMaybePaymentMethodType),
                                                        ("maybe_payment_method",
                                                         txnCardInfoMaybePaymentMethod),
                                                        ("maybe_card_global_fingerprint",
                                                         txnCardInfoMaybeCardGlobalFingerprint),
                                                        ("maybe_payment_source",
                                                         txnCardInfoMaybePaymentSource),
                                                        ("maybe_auth_type",
                                                         txnCardInfoMaybeAuthType),
                                                        ("txn_card_info_event_type",
                                                         txnCardInfoTxnCardInfoEventType)]}})
 
data TxnCardInfoMaybeCardIsin = TxnCardInfoMaybeCardIsinCardIsin Hs.Text
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeCardIsin where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeCardIsin")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeCardIsin where
        declareNamedSchema _
          = do let declare_card_isin = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardIsinCardIsin <- declare_card_isin Proxy.Proxy
               let _ = Hs.pure TxnCardInfoMaybeCardIsinCardIsin <*>
                         HsJSONPB.asProxy declare_card_isin
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeCardIsin",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_isin",
                                                         txnCardInfoMaybeCardIsinCardIsin)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybeCardIssuerBankName = TxnCardInfoMaybeCardIssuerBankNameCardIssuerBankName Hs.Text
                                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeCardIssuerBankName where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeCardIssuerBankName")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeCardIssuerBankName where
        declareNamedSchema _
          = do let declare_card_issuer_bank_name = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardIssuerBankNameCardIssuerBankName <- declare_card_issuer_bank_name
                                                                         Proxy.Proxy
               let _ = Hs.pure
                         TxnCardInfoMaybeCardIssuerBankNameCardIssuerBankName
                         <*> HsJSONPB.asProxy declare_card_issuer_bank_name
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeCardIssuerBankName",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_issuer_bank_name",
                                                         txnCardInfoMaybeCardIssuerBankNameCardIssuerBankName)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybeCardExpYear = TxnCardInfoMaybeCardExpYearCardExpYear Hs.Text
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeCardExpYear where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeCardExpYear")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeCardExpYear where
        declareNamedSchema _
          = do let declare_card_exp_year = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardExpYearCardExpYear <- declare_card_exp_year
                                                           Proxy.Proxy
               let _ = Hs.pure TxnCardInfoMaybeCardExpYearCardExpYear <*>
                         HsJSONPB.asProxy declare_card_exp_year
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeCardExpYear",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_exp_year",
                                                         txnCardInfoMaybeCardExpYearCardExpYear)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybeCardExpMonth = TxnCardInfoMaybeCardExpMonthCardExpMonth Hs.Text
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeCardExpMonth where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeCardExpMonth")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeCardExpMonth where
        declareNamedSchema _
          = do let declare_card_exp_month = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardExpMonthCardExpMonth <- declare_card_exp_month
                                                             Proxy.Proxy
               let _ = Hs.pure TxnCardInfoMaybeCardExpMonthCardExpMonth <*>
                         HsJSONPB.asProxy declare_card_exp_month
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeCardExpMonth",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_exp_month",
                                                         txnCardInfoMaybeCardExpMonthCardExpMonth)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybeCardSwitchProvider = TxnCardInfoMaybeCardSwitchProviderCardSwitchProvider Hs.Text
                                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeCardSwitchProvider where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeCardSwitchProvider")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeCardSwitchProvider where
        declareNamedSchema _
          = do let declare_card_switch_provider = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardSwitchProviderCardSwitchProvider <- declare_card_switch_provider
                                                                         Proxy.Proxy
               let _ = Hs.pure
                         TxnCardInfoMaybeCardSwitchProviderCardSwitchProvider
                         <*> HsJSONPB.asProxy declare_card_switch_provider
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeCardSwitchProvider",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_switch_provider",
                                                         txnCardInfoMaybeCardSwitchProviderCardSwitchProvider)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybeCardType = TxnCardInfoMaybeCardTypeCardType Hs.Text
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeCardType where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeCardType")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeCardType where
        declareNamedSchema _
          = do let declare_card_type = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardTypeCardType <- declare_card_type Proxy.Proxy
               let _ = Hs.pure TxnCardInfoMaybeCardTypeCardType <*>
                         HsJSONPB.asProxy declare_card_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeCardType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_type",
                                                         txnCardInfoMaybeCardTypeCardType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybeCardLastFourDigits = TxnCardInfoMaybeCardLastFourDigitsCardLastFourDigits Hs.Text
                                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeCardLastFourDigits where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeCardLastFourDigits")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeCardLastFourDigits where
        declareNamedSchema _
          = do let declare_card_last_four_digits = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardLastFourDigitsCardLastFourDigits <- declare_card_last_four_digits
                                                                         Proxy.Proxy
               let _ = Hs.pure
                         TxnCardInfoMaybeCardLastFourDigitsCardLastFourDigits
                         <*> HsJSONPB.asProxy declare_card_last_four_digits
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeCardLastFourDigits",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_last_four_digits",
                                                         txnCardInfoMaybeCardLastFourDigitsCardLastFourDigits)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybeNameOnCard = TxnCardInfoMaybeNameOnCardNameOnCard Hs.Text
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeNameOnCard where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeNameOnCard")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeNameOnCard where
        declareNamedSchema _
          = do let declare_name_on_card = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeNameOnCardNameOnCard <- declare_name_on_card
                                                         Proxy.Proxy
               let _ = Hs.pure TxnCardInfoMaybeNameOnCardNameOnCard <*>
                         HsJSONPB.asProxy declare_name_on_card
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeNameOnCard",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("name_on_card",
                                                         txnCardInfoMaybeNameOnCardNameOnCard)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybeCardFingerprint = TxnCardInfoMaybeCardFingerprintCardFingerprint Hs.Text
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeCardFingerprint where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeCardFingerprint")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeCardFingerprint where
        declareNamedSchema _
          = do let declare_card_fingerprint = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardFingerprintCardFingerprint <- declare_card_fingerprint
                                                                   Proxy.Proxy
               let _ = Hs.pure TxnCardInfoMaybeCardFingerprintCardFingerprint <*>
                         HsJSONPB.asProxy declare_card_fingerprint
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeCardFingerprint",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_fingerprint",
                                                         txnCardInfoMaybeCardFingerprintCardFingerprint)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybeCardReferenceId = TxnCardInfoMaybeCardReferenceIdCardReferenceId Hs.Text
                                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeCardReferenceId where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeCardReferenceId")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeCardReferenceId where
        declareNamedSchema _
          = do let declare_card_reference_id = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardReferenceIdCardReferenceId <- declare_card_reference_id
                                                                   Proxy.Proxy
               let _ = Hs.pure TxnCardInfoMaybeCardReferenceIdCardReferenceId <*>
                         HsJSONPB.asProxy declare_card_reference_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeCardReferenceId",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_reference_id",
                                                         txnCardInfoMaybeCardReferenceIdCardReferenceId)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybeTxnDetailId = TxnCardInfoMaybeTxnDetailIdTxnDetailId Hs.Int64
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeTxnDetailId where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeTxnDetailId")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeTxnDetailId where
        declareNamedSchema _
          = do let declare_txn_detail_id = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeTxnDetailIdTxnDetailId <- declare_txn_detail_id
                                                           Proxy.Proxy
               let _ = Hs.pure TxnCardInfoMaybeTxnDetailIdTxnDetailId <*>
                         HsJSONPB.asProxy declare_txn_detail_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeTxnDetailId",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("txn_detail_id",
                                                         txnCardInfoMaybeTxnDetailIdTxnDetailId)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybeDateCreated = TxnCardInfoMaybeDateCreatedDateCreated Hs.Int64
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeDateCreated where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeDateCreated")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeDateCreated where
        declareNamedSchema _
          = do let declare_date_created = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeDateCreatedDateCreated <- declare_date_created
                                                           Proxy.Proxy
               let _ = Hs.pure TxnCardInfoMaybeDateCreatedDateCreated <*>
                         HsJSONPB.asProxy declare_date_created
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeDateCreated",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("date_created",
                                                         txnCardInfoMaybeDateCreatedDateCreated)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybePaymentMethodType = TxnCardInfoMaybePaymentMethodTypePaymentMethodType (HsProtobuf.Enumerated
                                                                                               Euler.Proto.Event.TxnCardInfo.PaymentMethodType)
                                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybePaymentMethodType where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybePaymentMethodType")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybePaymentMethodType where
        declareNamedSchema _
          = do let declare_payment_method_type = HsJSONPB.declareSchemaRef
               txnCardInfoMaybePaymentMethodTypePaymentMethodType <- declare_payment_method_type
                                                                       Proxy.Proxy
               let _ = Hs.pure TxnCardInfoMaybePaymentMethodTypePaymentMethodType
                         <*> HsJSONPB.asProxy declare_payment_method_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybePaymentMethodType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("payment_method_type",
                                                         txnCardInfoMaybePaymentMethodTypePaymentMethodType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybePaymentMethod = TxnCardInfoMaybePaymentMethodPaymentMethod Hs.Text
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybePaymentMethod where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybePaymentMethod")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybePaymentMethod where
        declareNamedSchema _
          = do let declare_payment_method = HsJSONPB.declareSchemaRef
               txnCardInfoMaybePaymentMethodPaymentMethod <- declare_payment_method
                                                               Proxy.Proxy
               let _ = Hs.pure TxnCardInfoMaybePaymentMethodPaymentMethod <*>
                         HsJSONPB.asProxy declare_payment_method
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybePaymentMethod",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("payment_method",
                                                         txnCardInfoMaybePaymentMethodPaymentMethod)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybeCardGlobalFingerprint = TxnCardInfoMaybeCardGlobalFingerprintCardGlobalFingerprint Hs.Text
                                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeCardGlobalFingerprint
         where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeCardGlobalFingerprint")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeCardGlobalFingerprint
         where
        declareNamedSchema _
          = do let declare_card_global_fingerprint
                     = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeCardGlobalFingerprintCardGlobalFingerprint <- declare_card_global_fingerprint
                                                                               Proxy.Proxy
               let _ = Hs.pure
                         TxnCardInfoMaybeCardGlobalFingerprintCardGlobalFingerprint
                         <*> HsJSONPB.asProxy declare_card_global_fingerprint
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeCardGlobalFingerprint",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("card_global_fingerprint",
                                                         txnCardInfoMaybeCardGlobalFingerprintCardGlobalFingerprint)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybePaymentSource = TxnCardInfoMaybePaymentSourcePaymentSource Hs.Text
                                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybePaymentSource where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybePaymentSource")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybePaymentSource where
        declareNamedSchema _
          = do let declare_payment_source = HsJSONPB.declareSchemaRef
               txnCardInfoMaybePaymentSourcePaymentSource <- declare_payment_source
                                                               Proxy.Proxy
               let _ = Hs.pure TxnCardInfoMaybePaymentSourcePaymentSource <*>
                         HsJSONPB.asProxy declare_payment_source
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybePaymentSource",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("payment_source",
                                                         txnCardInfoMaybePaymentSourcePaymentSource)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data TxnCardInfoMaybeAuthType = TxnCardInfoMaybeAuthTypeAuthType Hs.Text
                              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoMaybeAuthType where
        nameOf _ = (Hs.fromString "TxnCardInfoMaybeAuthType")
 
instance HsJSONPB.ToSchema TxnCardInfoMaybeAuthType where
        declareNamedSchema _
          = do let declare_auth_type = HsJSONPB.declareSchemaRef
               txnCardInfoMaybeAuthTypeAuthType <- declare_auth_type Proxy.Proxy
               let _ = Hs.pure TxnCardInfoMaybeAuthTypeAuthType <*>
                         HsJSONPB.asProxy declare_auth_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TxnCardInfoMaybeAuthType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("auth_type",
                                                         txnCardInfoMaybeAuthTypeAuthType)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data PaymentMethodType = PaymentMethodTypeNO_PAYMENT_METHOD_TYPE
                       | PaymentMethodTypeWALLET
                       | PaymentMethodTypeUPI
                       | PaymentMethodTypeNB
                       | PaymentMethodTypeCARD
                       | PaymentMethodTypePAYLATER
                       | PaymentMethodTypeCONSUMER_FINANCE
                       | PaymentMethodTypeREWARD
                       | PaymentMethodTypeCASH
                       | PaymentMethodTypeUNKNOWN
                       deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named PaymentMethodType where
        nameOf _ = (Hs.fromString "PaymentMethodType")
 
instance HsProtobuf.HasDefault PaymentMethodType
 
instance Hs.Bounded PaymentMethodType where
        minBound = PaymentMethodTypeNO_PAYMENT_METHOD_TYPE
        maxBound = PaymentMethodTypeUNKNOWN
 
instance Hs.Ord PaymentMethodType where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum PaymentMethodType where
        toProtoEnumMay 0 = Hs.Just PaymentMethodTypeNO_PAYMENT_METHOD_TYPE
        toProtoEnumMay 1 = Hs.Just PaymentMethodTypeWALLET
        toProtoEnumMay 2 = Hs.Just PaymentMethodTypeUPI
        toProtoEnumMay 3 = Hs.Just PaymentMethodTypeNB
        toProtoEnumMay 4 = Hs.Just PaymentMethodTypeCARD
        toProtoEnumMay 5 = Hs.Just PaymentMethodTypePAYLATER
        toProtoEnumMay 6 = Hs.Just PaymentMethodTypeCONSUMER_FINANCE
        toProtoEnumMay 7 = Hs.Just PaymentMethodTypeREWARD
        toProtoEnumMay 8 = Hs.Just PaymentMethodTypeCASH
        toProtoEnumMay 9 = Hs.Just PaymentMethodTypeUNKNOWN
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (PaymentMethodTypeNO_PAYMENT_METHOD_TYPE) = 0
        fromProtoEnum (PaymentMethodTypeWALLET) = 1
        fromProtoEnum (PaymentMethodTypeUPI) = 2
        fromProtoEnum (PaymentMethodTypeNB) = 3
        fromProtoEnum (PaymentMethodTypeCARD) = 4
        fromProtoEnum (PaymentMethodTypePAYLATER) = 5
        fromProtoEnum (PaymentMethodTypeCONSUMER_FINANCE) = 6
        fromProtoEnum (PaymentMethodTypeREWARD) = 7
        fromProtoEnum (PaymentMethodTypeCASH) = 8
        fromProtoEnum (PaymentMethodTypeUNKNOWN) = 9
 
instance HsJSONPB.ToJSONPB PaymentMethodType where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB PaymentMethodType where
        parseJSONPB (HsJSONPB.String "NO_PAYMENT_METHOD_TYPE")
          = Hs.pure PaymentMethodTypeNO_PAYMENT_METHOD_TYPE
        parseJSONPB (HsJSONPB.String "WALLET")
          = Hs.pure PaymentMethodTypeWALLET
        parseJSONPB (HsJSONPB.String "UPI") = Hs.pure PaymentMethodTypeUPI
        parseJSONPB (HsJSONPB.String "NB") = Hs.pure PaymentMethodTypeNB
        parseJSONPB (HsJSONPB.String "CARD")
          = Hs.pure PaymentMethodTypeCARD
        parseJSONPB (HsJSONPB.String "PAYLATER")
          = Hs.pure PaymentMethodTypePAYLATER
        parseJSONPB (HsJSONPB.String "CONSUMER_FINANCE")
          = Hs.pure PaymentMethodTypeCONSUMER_FINANCE
        parseJSONPB (HsJSONPB.String "REWARD")
          = Hs.pure PaymentMethodTypeREWARD
        parseJSONPB (HsJSONPB.String "CASH")
          = Hs.pure PaymentMethodTypeCASH
        parseJSONPB (HsJSONPB.String "UNKNOWN")
          = Hs.pure PaymentMethodTypeUNKNOWN
        parseJSONPB v = (HsJSONPB.typeMismatch "PaymentMethodType" v)
 
instance HsJSONPB.ToJSON PaymentMethodType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON PaymentMethodType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite PaymentMethodType
 
data TxnCardInfoEventType = TxnCardInfoEventTypeNO_TXN_CARD_INFO_EVENT_TYPE
                          | TxnCardInfoEventTypeTXN_CARD_INFO_EVENT_CREATE
                          | TxnCardInfoEventTypeTXN_CARD_INFO_EVENT_UPDATE
                          deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TxnCardInfoEventType where
        nameOf _ = (Hs.fromString "TxnCardInfoEventType")
 
instance HsProtobuf.HasDefault TxnCardInfoEventType
 
instance Hs.Bounded TxnCardInfoEventType where
        minBound = TxnCardInfoEventTypeNO_TXN_CARD_INFO_EVENT_TYPE
        maxBound = TxnCardInfoEventTypeTXN_CARD_INFO_EVENT_UPDATE
 
instance Hs.Ord TxnCardInfoEventType where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum TxnCardInfoEventType where
        toProtoEnumMay 0
          = Hs.Just TxnCardInfoEventTypeNO_TXN_CARD_INFO_EVENT_TYPE
        toProtoEnumMay 1
          = Hs.Just TxnCardInfoEventTypeTXN_CARD_INFO_EVENT_CREATE
        toProtoEnumMay 2
          = Hs.Just TxnCardInfoEventTypeTXN_CARD_INFO_EVENT_UPDATE
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (TxnCardInfoEventTypeNO_TXN_CARD_INFO_EVENT_TYPE) = 0
        fromProtoEnum (TxnCardInfoEventTypeTXN_CARD_INFO_EVENT_CREATE) = 1
        fromProtoEnum (TxnCardInfoEventTypeTXN_CARD_INFO_EVENT_UPDATE) = 2
 
instance HsJSONPB.ToJSONPB TxnCardInfoEventType where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB TxnCardInfoEventType where
        parseJSONPB (HsJSONPB.String "NO_TXN_CARD_INFO_EVENT_TYPE")
          = Hs.pure TxnCardInfoEventTypeNO_TXN_CARD_INFO_EVENT_TYPE
        parseJSONPB (HsJSONPB.String "TXN_CARD_INFO_EVENT_CREATE")
          = Hs.pure TxnCardInfoEventTypeTXN_CARD_INFO_EVENT_CREATE
        parseJSONPB (HsJSONPB.String "TXN_CARD_INFO_EVENT_UPDATE")
          = Hs.pure TxnCardInfoEventTypeTXN_CARD_INFO_EVENT_UPDATE
        parseJSONPB v = (HsJSONPB.typeMismatch "TxnCardInfoEventType" v)
 
instance HsJSONPB.ToJSON TxnCardInfoEventType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON TxnCardInfoEventType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite TxnCardInfoEventType