{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Euler.Proto.Event.Chargeback where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data Chargeback = Chargeback{chargebackId :: Hs.Text,
                             chargebackVersion :: Hs.Int64, chargebackAmount :: Hs.Double,
                             chargebackChargebackStatus ::
                             Hs.Maybe Euler.Proto.Event.Chargeback.ChargebackStatus,
                             chargebackMerchantAccountId :: Hs.Int64,
                             chargebackObjectReferenceId :: Hs.Text,
                             chargebackMaybeTransactionDetailId ::
                             Hs.Maybe ChargebackMaybeTransactionDetailId,
                             chargebackChargebackEventType ::
                             HsProtobuf.Enumerated
                               Euler.Proto.Event.Chargeback.ChargebackEventType}
                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Chargeback where
        nameOf _ = (Hs.fromString "Chargeback")
 
instance HsProtobuf.HasDefault Chargeback
 
instance HsProtobuf.Message Chargeback where
        encodeMessage _
          Chargeback{chargebackId = chargebackId,
                     chargebackVersion = chargebackVersion,
                     chargebackAmount = chargebackAmount,
                     chargebackChargebackStatus = chargebackChargebackStatus,
                     chargebackMerchantAccountId = chargebackMerchantAccountId,
                     chargebackObjectReferenceId = chargebackObjectReferenceId,
                     chargebackMaybeTransactionDetailId =
                       chargebackMaybeTransactionDetailId,
                     chargebackChargebackEventType = chargebackChargebackEventType}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   chargebackId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   chargebackVersion),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   chargebackAmount),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (Hs.coerce
                      @(Hs.Maybe Euler.Proto.Event.Chargeback.ChargebackStatus)
                      @(HsProtobuf.Nested Euler.Proto.Event.Chargeback.ChargebackStatus)
                      chargebackChargebackStatus)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   chargebackMerchantAccountId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   chargebackObjectReferenceId),
                case chargebackMaybeTransactionDetailId of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ChargebackMaybeTransactionDetailIdTransactionDetailId y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                                     (HsProtobuf.ForceEmit y)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                   chargebackChargebackEventType)])
        decodeMessage _
          = (Hs.pure Chargeback) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Euler.Proto.Event.Chargeback.ChargebackStatus))
                 @(_ (Hs.Maybe Euler.Proto.Event.Chargeback.ChargebackStatus))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 6))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 8),
                   (Hs.pure
                      (Hs.Just Hs..
                         ChargebackMaybeTransactionDetailIdTransactionDetailId))
                     <*> HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 7))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "version")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Double)
                (HsProtobuf.Single "amount")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ChargebackStatus")))
                (HsProtobuf.Single "chargeback_status")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "merchant_account_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "object_reference_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 7)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ChargebackEventType")))
                (HsProtobuf.Single "chargeback_event_type")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Chargeback where
        toJSONPB (Chargeback f1 f2 f3 f4 f5 f6 f8 f7)
          = (HsJSONPB.object
               ["id" .= f1, "version" .= f2, "amount" .= f3,
                "chargeback_status" .= f4, "merchant_account_id" .= f5,
                "object_reference_id" .= f6,
                (let encodeMaybe_transaction_detail_id
                       = (case f8 of
                              Hs.Just (ChargebackMaybeTransactionDetailIdTransactionDetailId f8)
                                -> (HsJSONPB.pair "transaction_detail_id" f8)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_transaction_detail_id" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_transaction_detail_id]
                             options))
                         options
                       else encodeMaybe_transaction_detail_id options),
                "chargeback_event_type" .= f7])
        toEncodingPB (Chargeback f1 f2 f3 f4 f5 f6 f8 f7)
          = (HsJSONPB.pairs
               ["id" .= f1, "version" .= f2, "amount" .= f3,
                "chargeback_status" .= f4, "merchant_account_id" .= f5,
                "object_reference_id" .= f6,
                (let encodeMaybe_transaction_detail_id
                       = (case f8 of
                              Hs.Just (ChargebackMaybeTransactionDetailIdTransactionDetailId f8)
                                -> (HsJSONPB.pair "transaction_detail_id" f8)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_transaction_detail_id" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_transaction_detail_id] options))
                         options
                       else encodeMaybe_transaction_detail_id options),
                "chargeback_event_type" .= f7])
 
instance HsJSONPB.FromJSONPB Chargeback where
        parseJSONPB
          = (HsJSONPB.withObject "Chargeback"
               (\ obj ->
                  (Hs.pure Chargeback) <*> obj .: "id" <*> obj .: "version" <*>
                    obj .: "amount"
                    <*> obj .: "chargeback_status"
                    <*> obj .: "merchant_account_id"
                    <*> obj .: "object_reference_id"
                    <*>
                    (let parseMaybe_transaction_detail_id parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ChargebackMaybeTransactionDetailIdTransactionDetailId
                                  <$> (HsJSONPB.parseField parseObj "transaction_detail_id"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_transaction_detail_id") Hs.>>=
                          (HsJSONPB.withObject "maybe_transaction_detail_id"
                             parseMaybe_transaction_detail_id))
                         <|> (parseMaybe_transaction_detail_id obj))
                    <*> obj .: "chargeback_event_type"))
 
instance HsJSONPB.ToJSON Chargeback where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Chargeback where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Chargeback where
        declareNamedSchema _
          = do let declare_id = HsJSONPB.declareSchemaRef
               chargebackId <- declare_id Proxy.Proxy
               let declare_version = HsJSONPB.declareSchemaRef
               chargebackVersion <- declare_version Proxy.Proxy
               let declare_amount = HsJSONPB.declareSchemaRef
               chargebackAmount <- declare_amount Proxy.Proxy
               let declare_chargeback_status = HsJSONPB.declareSchemaRef
               chargebackChargebackStatus <- declare_chargeback_status Proxy.Proxy
               let declare_merchant_account_id = HsJSONPB.declareSchemaRef
               chargebackMerchantAccountId <- declare_merchant_account_id
                                                Proxy.Proxy
               let declare_object_reference_id = HsJSONPB.declareSchemaRef
               chargebackObjectReferenceId <- declare_object_reference_id
                                                Proxy.Proxy
               let declare_maybe_transaction_detail_id = HsJSONPB.declareSchemaRef
               chargebackMaybeTransactionDetailId <- declare_maybe_transaction_detail_id
                                                       Proxy.Proxy
               let declare_chargeback_event_type = HsJSONPB.declareSchemaRef
               chargebackChargebackEventType <- declare_chargeback_event_type
                                                  Proxy.Proxy
               let _ = Hs.pure Chargeback <*> HsJSONPB.asProxy declare_id <*>
                         HsJSONPB.asProxy declare_version
                         <*> HsJSONPB.asProxy declare_amount
                         <*> HsJSONPB.asProxy declare_chargeback_status
                         <*> HsJSONPB.asProxy declare_merchant_account_id
                         <*> HsJSONPB.asProxy declare_object_reference_id
                         <*> HsJSONPB.asProxy declare_maybe_transaction_detail_id
                         <*> HsJSONPB.asProxy declare_chargeback_event_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Chargeback",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("id", chargebackId),
                                                        ("version", chargebackVersion),
                                                        ("amount", chargebackAmount),
                                                        ("chargeback_status",
                                                         chargebackChargebackStatus),
                                                        ("merchant_account_id",
                                                         chargebackMerchantAccountId),
                                                        ("object_reference_id",
                                                         chargebackObjectReferenceId),
                                                        ("maybe_transaction_detail_id",
                                                         chargebackMaybeTransactionDetailId),
                                                        ("chargeback_event_type",
                                                         chargebackChargebackEventType)]}})
 
data ChargebackMaybeTransactionDetailId = ChargebackMaybeTransactionDetailIdTransactionDetailId Hs.Int64
                                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ChargebackMaybeTransactionDetailId where
        nameOf _ = (Hs.fromString "ChargebackMaybeTransactionDetailId")
 
instance HsJSONPB.ToSchema ChargebackMaybeTransactionDetailId where
        declareNamedSchema _
          = do let declare_transaction_detail_id = HsJSONPB.declareSchemaRef
               chargebackMaybeTransactionDetailIdTransactionDetailId <- declare_transaction_detail_id
                                                                          Proxy.Proxy
               let _ = Hs.pure
                         ChargebackMaybeTransactionDetailIdTransactionDetailId
                         <*> HsJSONPB.asProxy declare_transaction_detail_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ChargebackMaybeTransactionDetailId",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("transaction_detail_id",
                                                         chargebackMaybeTransactionDetailIdTransactionDetailId)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data ChargebackStatus = ChargebackStatus{chargebackStatusDateCreated
                                         :: Hs.Int64,
                                         chargebackStatusStatusDescription :: Hs.Text,
                                         chargebackStatusLastUpdated :: Hs.Int64,
                                         chargebackStatusMaybeDateResolved ::
                                         Hs.Maybe ChargebackStatusMaybeDateResolved}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ChargebackStatus where
        nameOf _ = (Hs.fromString "ChargebackStatus")
 
instance HsProtobuf.HasDefault ChargebackStatus
 
instance HsProtobuf.Message ChargebackStatus where
        encodeMessage _
          ChargebackStatus{chargebackStatusDateCreated =
                             chargebackStatusDateCreated,
                           chargebackStatusStatusDescription =
                             chargebackStatusStatusDescription,
                           chargebackStatusLastUpdated = chargebackStatusLastUpdated,
                           chargebackStatusMaybeDateResolved =
                             chargebackStatusMaybeDateResolved}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   chargebackStatusDateCreated),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   chargebackStatusStatusDescription),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   chargebackStatusLastUpdated),
                case chargebackStatusMaybeDateResolved of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             ChargebackStatusMaybeDateResolvedDateResolved y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (HsProtobuf.ForceEmit y))])
        decodeMessage _
          = (Hs.pure ChargebackStatus) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 4),
                   (Hs.pure
                      (Hs.Just Hs.. ChargebackStatusMaybeDateResolvedDateResolved))
                     <*> HsProtobuf.decodeMessageField)])
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "date_created")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "status_description")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "last_updated")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ChargebackStatus where
        toJSONPB (ChargebackStatus f1 f2 f3 f4)
          = (HsJSONPB.object
               ["date_created" .= f1, "status_description" .= f2,
                "last_updated" .= f3,
                (let encodeMaybe_date_resolved
                       = (case f4 of
                              Hs.Just (ChargebackStatusMaybeDateResolvedDateResolved f4)
                                -> (HsJSONPB.pair "date_resolved" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_date_resolved" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_date_resolved] options))
                         options
                       else encodeMaybe_date_resolved options)])
        toEncodingPB (ChargebackStatus f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["date_created" .= f1, "status_description" .= f2,
                "last_updated" .= f3,
                (let encodeMaybe_date_resolved
                       = (case f4 of
                              Hs.Just (ChargebackStatusMaybeDateResolvedDateResolved f4)
                                -> (HsJSONPB.pair "date_resolved" f4)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_date_resolved" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_date_resolved] options))
                         options
                       else encodeMaybe_date_resolved options)])
 
instance HsJSONPB.FromJSONPB ChargebackStatus where
        parseJSONPB
          = (HsJSONPB.withObject "ChargebackStatus"
               (\ obj ->
                  (Hs.pure ChargebackStatus) <*> obj .: "date_created" <*>
                    obj .: "status_description"
                    <*> obj .: "last_updated"
                    <*>
                    (let parseMaybe_date_resolved parseObj
                           = Hs.msum
                               [Hs.Just Hs.. ChargebackStatusMaybeDateResolvedDateResolved <$>
                                  (HsJSONPB.parseField parseObj "date_resolved"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_date_resolved") Hs.>>=
                          (HsJSONPB.withObject "maybe_date_resolved"
                             parseMaybe_date_resolved))
                         <|> (parseMaybe_date_resolved obj))))
 
instance HsJSONPB.ToJSON ChargebackStatus where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ChargebackStatus where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ChargebackStatus where
        declareNamedSchema _
          = do let declare_date_created = HsJSONPB.declareSchemaRef
               chargebackStatusDateCreated <- declare_date_created Proxy.Proxy
               let declare_status_description = HsJSONPB.declareSchemaRef
               chargebackStatusStatusDescription <- declare_status_description
                                                      Proxy.Proxy
               let declare_last_updated = HsJSONPB.declareSchemaRef
               chargebackStatusLastUpdated <- declare_last_updated Proxy.Proxy
               let declare_maybe_date_resolved = HsJSONPB.declareSchemaRef
               chargebackStatusMaybeDateResolved <- declare_maybe_date_resolved
                                                      Proxy.Proxy
               let _ = Hs.pure ChargebackStatus <*>
                         HsJSONPB.asProxy declare_date_created
                         <*> HsJSONPB.asProxy declare_status_description
                         <*> HsJSONPB.asProxy declare_last_updated
                         <*> HsJSONPB.asProxy declare_maybe_date_resolved
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ChargebackStatus",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("date_created",
                                                         chargebackStatusDateCreated),
                                                        ("status_description",
                                                         chargebackStatusStatusDescription),
                                                        ("last_updated",
                                                         chargebackStatusLastUpdated),
                                                        ("maybe_date_resolved",
                                                         chargebackStatusMaybeDateResolved)]}})
 
data ChargebackStatusMaybeDateResolved = ChargebackStatusMaybeDateResolvedDateResolved Hs.Int64
                                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ChargebackStatusMaybeDateResolved where
        nameOf _ = (Hs.fromString "ChargebackStatusMaybeDateResolved")
 
instance HsJSONPB.ToSchema ChargebackStatusMaybeDateResolved where
        declareNamedSchema _
          = do let declare_date_resolved = HsJSONPB.declareSchemaRef
               chargebackStatusMaybeDateResolvedDateResolved <- declare_date_resolved
                                                                  Proxy.Proxy
               let _ = Hs.pure ChargebackStatusMaybeDateResolvedDateResolved <*>
                         HsJSONPB.asProxy declare_date_resolved
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ChargebackStatusMaybeDateResolved",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("date_resolved",
                                                         chargebackStatusMaybeDateResolvedDateResolved)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data ChargebackEventType = ChargebackEventTypeNO_CHARGEBACK_EVENT_TYPE
                         | ChargebackEventTypeCHARGEBACK_EVENT_CREATE
                         | ChargebackEventTypeCHARGEBACK_EVENT_UPDATE
                         deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ChargebackEventType where
        nameOf _ = (Hs.fromString "ChargebackEventType")
 
instance HsProtobuf.HasDefault ChargebackEventType
 
instance Hs.Bounded ChargebackEventType where
        minBound = ChargebackEventTypeNO_CHARGEBACK_EVENT_TYPE
        maxBound = ChargebackEventTypeCHARGEBACK_EVENT_UPDATE
 
instance Hs.Ord ChargebackEventType where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum ChargebackEventType where
        toProtoEnumMay 0
          = Hs.Just ChargebackEventTypeNO_CHARGEBACK_EVENT_TYPE
        toProtoEnumMay 1
          = Hs.Just ChargebackEventTypeCHARGEBACK_EVENT_CREATE
        toProtoEnumMay 2
          = Hs.Just ChargebackEventTypeCHARGEBACK_EVENT_UPDATE
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (ChargebackEventTypeNO_CHARGEBACK_EVENT_TYPE) = 0
        fromProtoEnum (ChargebackEventTypeCHARGEBACK_EVENT_CREATE) = 1
        fromProtoEnum (ChargebackEventTypeCHARGEBACK_EVENT_UPDATE) = 2
 
instance HsJSONPB.ToJSONPB ChargebackEventType where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB ChargebackEventType where
        parseJSONPB (HsJSONPB.String "NO_CHARGEBACK_EVENT_TYPE")
          = Hs.pure ChargebackEventTypeNO_CHARGEBACK_EVENT_TYPE
        parseJSONPB (HsJSONPB.String "CHARGEBACK_EVENT_CREATE")
          = Hs.pure ChargebackEventTypeCHARGEBACK_EVENT_CREATE
        parseJSONPB (HsJSONPB.String "CHARGEBACK_EVENT_UPDATE")
          = Hs.pure ChargebackEventTypeCHARGEBACK_EVENT_UPDATE
        parseJSONPB v = (HsJSONPB.typeMismatch "ChargebackEventType" v)
 
instance HsJSONPB.ToJSON ChargebackEventType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ChargebackEventType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite ChargebackEventType