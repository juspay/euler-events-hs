{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Euler.Proto.Event.Feature where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data Feature = Feature{featureId :: Hs.Int64,
                       featureVersion :: Hs.Int64, featureEnabled :: Hs.Bool,
                       featureName :: Hs.Text,
                       featureMaybeMerchantId :: Hs.Maybe FeatureMaybeMerchantId,
                       featureMaybeDisabledUntil :: Hs.Maybe FeatureMaybeDisabledUntil,
                       featureFeatureEventType ::
                       HsProtobuf.Enumerated Euler.Proto.Event.Feature.FeatureEventType}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Feature where
        nameOf _ = (Hs.fromString "Feature")
 
instance HsProtobuf.HasDefault Feature
 
instance HsProtobuf.Message Feature where
        encodeMessage _
          Feature{featureId = featureId, featureVersion = featureVersion,
                  featureEnabled = featureEnabled, featureName = featureName,
                  featureMaybeMerchantId = featureMaybeMerchantId,
                  featureMaybeDisabledUntil = featureMaybeDisabledUntil,
                  featureFeatureEventType = featureFeatureEventType}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   featureId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   featureVersion),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   featureEnabled),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   featureName),
                case featureMaybeMerchantId of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             FeatureMaybeMerchantIdMerchantId y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                                     (HsProtobuf.ForceEmit y)),
                case featureMaybeDisabledUntil of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             FeatureMaybeDisabledUntilDisabledUntil y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                                     (HsProtobuf.ForceEmit y)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   featureFeatureEventType)])
        decodeMessage _
          = (Hs.pure Feature) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 6),
                   (Hs.pure (Hs.Just Hs.. FeatureMaybeMerchantIdMerchantId)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 7),
                   (Hs.pure (Hs.Just Hs.. FeatureMaybeDisabledUntilDisabledUntil)) <*>
                     HsProtobuf.decodeMessageField)])
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int64)
                (HsProtobuf.Single "version")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "enabled")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "name")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "FeatureEventType")))
                (HsProtobuf.Single "feature_event_type")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Feature where
        toJSONPB (Feature f1 f2 f3 f4 f6 f7 f5)
          = (HsJSONPB.object
               ["id" .= f1, "version" .= f2, "enabled" .= f3, "name" .= f4,
                (let encodeMaybe_merchant_id
                       = (case f6 of
                              Hs.Just (FeatureMaybeMerchantIdMerchantId f6)
                                -> (HsJSONPB.pair "merchant_id" f6)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_merchant_id" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_merchant_id] options))
                         options
                       else encodeMaybe_merchant_id options),
                (let encodeMaybe_disabled_until
                       = (case f7 of
                              Hs.Just (FeatureMaybeDisabledUntilDisabledUntil f7)
                                -> (HsJSONPB.pair "disabled_until" f7)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_disabled_until" .=
                          (HsJSONPB.objectOrNull [encodeMaybe_disabled_until] options))
                         options
                       else encodeMaybe_disabled_until options),
                "feature_event_type" .= f5])
        toEncodingPB (Feature f1 f2 f3 f4 f6 f7 f5)
          = (HsJSONPB.pairs
               ["id" .= f1, "version" .= f2, "enabled" .= f3, "name" .= f4,
                (let encodeMaybe_merchant_id
                       = (case f6 of
                              Hs.Just (FeatureMaybeMerchantIdMerchantId f6)
                                -> (HsJSONPB.pair "merchant_id" f6)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_merchant_id" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_merchant_id] options))
                         options
                       else encodeMaybe_merchant_id options),
                (let encodeMaybe_disabled_until
                       = (case f7 of
                              Hs.Just (FeatureMaybeDisabledUntilDisabledUntil f7)
                                -> (HsJSONPB.pair "disabled_until" f7)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("maybe_disabled_until" .=
                          (HsJSONPB.pairsOrNull [encodeMaybe_disabled_until] options))
                         options
                       else encodeMaybe_disabled_until options),
                "feature_event_type" .= f5])
 
instance HsJSONPB.FromJSONPB Feature where
        parseJSONPB
          = (HsJSONPB.withObject "Feature"
               (\ obj ->
                  (Hs.pure Feature) <*> obj .: "id" <*> obj .: "version" <*>
                    obj .: "enabled"
                    <*> obj .: "name"
                    <*>
                    (let parseMaybe_merchant_id parseObj
                           = Hs.msum
                               [Hs.Just Hs.. FeatureMaybeMerchantIdMerchantId <$>
                                  (HsJSONPB.parseField parseObj "merchant_id"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_merchant_id") Hs.>>=
                          (HsJSONPB.withObject "maybe_merchant_id" parseMaybe_merchant_id))
                         <|> (parseMaybe_merchant_id obj))
                    <*>
                    (let parseMaybe_disabled_until parseObj
                           = Hs.msum
                               [Hs.Just Hs.. FeatureMaybeDisabledUntilDisabledUntil <$>
                                  (HsJSONPB.parseField parseObj "disabled_until"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "maybe_disabled_until") Hs.>>=
                          (HsJSONPB.withObject "maybe_disabled_until"
                             parseMaybe_disabled_until))
                         <|> (parseMaybe_disabled_until obj))
                    <*> obj .: "feature_event_type"))
 
instance HsJSONPB.ToJSON Feature where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Feature where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Feature where
        declareNamedSchema _
          = do let declare_id = HsJSONPB.declareSchemaRef
               featureId <- declare_id Proxy.Proxy
               let declare_version = HsJSONPB.declareSchemaRef
               featureVersion <- declare_version Proxy.Proxy
               let declare_enabled = HsJSONPB.declareSchemaRef
               featureEnabled <- declare_enabled Proxy.Proxy
               let declare_name = HsJSONPB.declareSchemaRef
               featureName <- declare_name Proxy.Proxy
               let declare_maybe_merchant_id = HsJSONPB.declareSchemaRef
               featureMaybeMerchantId <- declare_maybe_merchant_id Proxy.Proxy
               let declare_maybe_disabled_until = HsJSONPB.declareSchemaRef
               featureMaybeDisabledUntil <- declare_maybe_disabled_until
                                              Proxy.Proxy
               let declare_feature_event_type = HsJSONPB.declareSchemaRef
               featureFeatureEventType <- declare_feature_event_type Proxy.Proxy
               let _ = Hs.pure Feature <*> HsJSONPB.asProxy declare_id <*>
                         HsJSONPB.asProxy declare_version
                         <*> HsJSONPB.asProxy declare_enabled
                         <*> HsJSONPB.asProxy declare_name
                         <*> HsJSONPB.asProxy declare_maybe_merchant_id
                         <*> HsJSONPB.asProxy declare_maybe_disabled_until
                         <*> HsJSONPB.asProxy declare_feature_event_type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Feature",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("id", featureId),
                                                        ("version", featureVersion),
                                                        ("enabled", featureEnabled),
                                                        ("name", featureName),
                                                        ("maybe_merchant_id",
                                                         featureMaybeMerchantId),
                                                        ("maybe_disabled_until",
                                                         featureMaybeDisabledUntil),
                                                        ("feature_event_type",
                                                         featureFeatureEventType)]}})
 
data FeatureMaybeMerchantId = FeatureMaybeMerchantIdMerchantId Hs.Text
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named FeatureMaybeMerchantId where
        nameOf _ = (Hs.fromString "FeatureMaybeMerchantId")
 
instance HsJSONPB.ToSchema FeatureMaybeMerchantId where
        declareNamedSchema _
          = do let declare_merchant_id = HsJSONPB.declareSchemaRef
               featureMaybeMerchantIdMerchantId <- declare_merchant_id Proxy.Proxy
               let _ = Hs.pure FeatureMaybeMerchantIdMerchantId <*>
                         HsJSONPB.asProxy declare_merchant_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "FeatureMaybeMerchantId",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("merchant_id",
                                                         featureMaybeMerchantIdMerchantId)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data FeatureMaybeDisabledUntil = FeatureMaybeDisabledUntilDisabledUntil Hs.Int64
                               deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named FeatureMaybeDisabledUntil where
        nameOf _ = (Hs.fromString "FeatureMaybeDisabledUntil")
 
instance HsJSONPB.ToSchema FeatureMaybeDisabledUntil where
        declareNamedSchema _
          = do let declare_disabled_until = HsJSONPB.declareSchemaRef
               featureMaybeDisabledUntilDisabledUntil <- declare_disabled_until
                                                           Proxy.Proxy
               let _ = Hs.pure FeatureMaybeDisabledUntilDisabledUntil <*>
                         HsJSONPB.asProxy declare_disabled_until
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "FeatureMaybeDisabledUntil",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("disabled_until",
                                                         featureMaybeDisabledUntilDisabledUntil)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data FeatureEventType = FeatureEventTypeNO_FEATURE_EVENT_TYPE
                      | FeatureEventTypeFEATURE_EVENT_CREATE
                      | FeatureEventTypeFEATURE_EVENT_UPDATE
                      deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named FeatureEventType where
        nameOf _ = (Hs.fromString "FeatureEventType")
 
instance HsProtobuf.HasDefault FeatureEventType
 
instance Hs.Bounded FeatureEventType where
        minBound = FeatureEventTypeNO_FEATURE_EVENT_TYPE
        maxBound = FeatureEventTypeFEATURE_EVENT_UPDATE
 
instance Hs.Ord FeatureEventType where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum FeatureEventType where
        toProtoEnumMay 0 = Hs.Just FeatureEventTypeNO_FEATURE_EVENT_TYPE
        toProtoEnumMay 1 = Hs.Just FeatureEventTypeFEATURE_EVENT_CREATE
        toProtoEnumMay 2 = Hs.Just FeatureEventTypeFEATURE_EVENT_UPDATE
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (FeatureEventTypeNO_FEATURE_EVENT_TYPE) = 0
        fromProtoEnum (FeatureEventTypeFEATURE_EVENT_CREATE) = 1
        fromProtoEnum (FeatureEventTypeFEATURE_EVENT_UPDATE) = 2
 
instance HsJSONPB.ToJSONPB FeatureEventType where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB FeatureEventType where
        parseJSONPB (HsJSONPB.String "NO_FEATURE_EVENT_TYPE")
          = Hs.pure FeatureEventTypeNO_FEATURE_EVENT_TYPE
        parseJSONPB (HsJSONPB.String "FEATURE_EVENT_CREATE")
          = Hs.pure FeatureEventTypeFEATURE_EVENT_CREATE
        parseJSONPB (HsJSONPB.String "FEATURE_EVENT_UPDATE")
          = Hs.pure FeatureEventTypeFEATURE_EVENT_UPDATE
        parseJSONPB v = (HsJSONPB.typeMismatch "FeatureEventType" v)
 
instance HsJSONPB.ToJSON FeatureEventType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON FeatureEventType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite FeatureEventType